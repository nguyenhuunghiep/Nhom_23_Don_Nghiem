
test_dht11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004488  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800474c  0800474c  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800474c  0800474c  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800474c  0800474c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800474c  0800474c  0001474c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004750  08004750  00014750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000094  080047e8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080047e8  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb06  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224e  00000000  00000000  0002ebc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00030e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00031db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b90  00000000  00000000  00032ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012daa  00000000  00000000  0004b838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ad5  00000000  00000000  0005e5e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f00b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f0  00000000  00000000  000f0108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	0800457c 	.word	0x0800457c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	0800457c 	.word	0x0800457c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <delay>:
extern TIM_HandleTypeDef htim2;
#include "DHT.h"


 void delay(volatile uint32_t delay)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]

		__HAL_TIM_SetCounter(&htim2,0);
 8000178:	4b0e      	ldr	r3, [pc, #56]	; (80001b4 <delay+0x44>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	2200      	movs	r2, #0
 800017e:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetAutoreload(&htim2,65535);
 8000180:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <delay+0x44>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000188:	62da      	str	r2, [r3, #44]	; 0x2c
 800018a:	4b0a      	ldr	r3, [pc, #40]	; (80001b4 <delay+0x44>)
 800018c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000190:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start(&htim2);
 8000192:	4808      	ldr	r0, [pc, #32]	; (80001b4 <delay+0x44>)
 8000194:	f002 fce4 	bl	8002b60 <HAL_TIM_Base_Start>
		while(__HAL_TIM_GetCounter(&htim2)<delay);
 8000198:	bf00      	nop
 800019a:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <delay+0x44>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	429a      	cmp	r2, r3
 80001a4:	d3f9      	bcc.n	800019a <delay+0x2a>
		HAL_TIM_Base_Stop(&htim2);
 80001a6:	4803      	ldr	r0, [pc, #12]	; (80001b4 <delay+0x44>)
 80001a8:	f002 fd24 	bl	8002bf4 <HAL_TIM_Base_Stop>

}
 80001ac:	bf00      	nop
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	2000010c 	.word	0x2000010c

080001b8 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b086      	sub	sp, #24
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
 80001c0:	460b      	mov	r3, r1
 80001c2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c4:	f107 0308 	add.w	r3, r7, #8
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80001d2:	887b      	ldrh	r3, [r7, #2]
 80001d4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d6:	2301      	movs	r3, #1
 80001d8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001da:	2302      	movs	r3, #2
 80001dc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80001de:	f107 0308 	add.w	r3, r7, #8
 80001e2:	4619      	mov	r1, r3
 80001e4:	6878      	ldr	r0, [r7, #4]
 80001e6:	f001 fa3b 	bl	8001660 <HAL_GPIO_Init>
}
 80001ea:	bf00      	nop
 80001ec:	3718      	adds	r7, #24
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}

080001f2 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80001f2:	b580      	push	{r7, lr}
 80001f4:	b086      	sub	sp, #24
 80001f6:	af00      	add	r7, sp, #0
 80001f8:	6078      	str	r0, [r7, #4]
 80001fa:	460b      	mov	r3, r1
 80001fc:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001fe:	f107 0308 	add.w	r3, r7, #8
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800020c:	887b      	ldrh	r3, [r7, #2]
 800020e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000210:	2300      	movs	r3, #0
 8000212:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000214:	2300      	movs	r3, #0
 8000216:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000218:	f107 0308 	add.w	r3, r7, #8
 800021c:	4619      	mov	r1, r3
 800021e:	6878      	ldr	r0, [r7, #4]
 8000220:	f001 fa1e 	bl	8001660 <HAL_GPIO_Init>
}
 8000224:	bf00      	nop
 8000226:	3718      	adds	r7, #24
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <DHT_Start>:


void DHT_Start (void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0

	Set_Pin_Output (DHT_PORT, DHT_PIN); // set the pin as output
 8000230:	2102      	movs	r1, #2
 8000232:	4811      	ldr	r0, [pc, #68]	; (8000278 <DHT_Start+0x4c>)
 8000234:	f7ff ffc0 	bl	80001b8 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);
 8000238:	2201      	movs	r2, #1
 800023a:	2102      	movs	r1, #2
 800023c:	480e      	ldr	r0, [pc, #56]	; (8000278 <DHT_Start+0x4c>)
 800023e:	f001 fbaa 	bl	8001996 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000242:	200a      	movs	r0, #10
 8000244:	f001 f82a 	bl	800129c <HAL_Delay>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000248:	2200      	movs	r2, #0
 800024a:	2102      	movs	r1, #2
 800024c:	480a      	ldr	r0, [pc, #40]	; (8000278 <DHT_Start+0x4c>)
 800024e:	f001 fba2 	bl	8001996 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000252:	f244 6050 	movw	r0, #18000	; 0x4650
 8000256:	f7ff ff8b 	bl	8000170 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 800025a:	2201      	movs	r2, #1
 800025c:	2102      	movs	r1, #2
 800025e:	4806      	ldr	r0, [pc, #24]	; (8000278 <DHT_Start+0x4c>)
 8000260:	f001 fb99 	bl	8001996 <HAL_GPIO_WritePin>
    delay (30);   // wait for 30us
 8000264:	201e      	movs	r0, #30
 8000266:	f7ff ff83 	bl	8000170 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 800026a:	2102      	movs	r1, #2
 800026c:	4802      	ldr	r0, [pc, #8]	; (8000278 <DHT_Start+0x4c>)
 800026e:	f7ff ffc0 	bl	80001f2 <Set_Pin_Input>
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40010800 	.word	0x40010800

0800027c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000286:	2028      	movs	r0, #40	; 0x28
 8000288:	f7ff ff72 	bl	8000170 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 800028c:	2102      	movs	r1, #2
 800028e:	4811      	ldr	r0, [pc, #68]	; (80002d4 <DHT_Check_Response+0x58>)
 8000290:	f001 fb6a 	bl	8001968 <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d10e      	bne.n	80002b8 <DHT_Check_Response+0x3c>
	{
		delay (80);
 800029a:	2050      	movs	r0, #80	; 0x50
 800029c:	f7ff ff68 	bl	8000170 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 80002a0:	2102      	movs	r1, #2
 80002a2:	480c      	ldr	r0, [pc, #48]	; (80002d4 <DHT_Check_Response+0x58>)
 80002a4:	f001 fb60 	bl	8001968 <HAL_GPIO_ReadPin>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d002      	beq.n	80002b4 <DHT_Check_Response+0x38>
 80002ae:	2301      	movs	r3, #1
 80002b0:	71fb      	strb	r3, [r7, #7]
 80002b2:	e001      	b.n	80002b8 <DHT_Check_Response+0x3c>
		else Response = -1;
 80002b4:	23ff      	movs	r3, #255	; 0xff
 80002b6:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 80002b8:	bf00      	nop
 80002ba:	2102      	movs	r1, #2
 80002bc:	4805      	ldr	r0, [pc, #20]	; (80002d4 <DHT_Check_Response+0x58>)
 80002be:	f001 fb53 	bl	8001968 <HAL_GPIO_ReadPin>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d1f8      	bne.n	80002ba <DHT_Check_Response+0x3e>

	return Response;
 80002c8:	79fb      	ldrb	r3, [r7, #7]
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40010800 	.word	0x40010800

080002d8 <DHT_Read>:

uint8_t DHT_Read (void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80002de:	2300      	movs	r3, #0
 80002e0:	71bb      	strb	r3, [r7, #6]
 80002e2:	e037      	b.n	8000354 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 80002e4:	bf00      	nop
 80002e6:	2102      	movs	r1, #2
 80002e8:	481e      	ldr	r0, [pc, #120]	; (8000364 <DHT_Read+0x8c>)
 80002ea:	f001 fb3d 	bl	8001968 <HAL_GPIO_ReadPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f8      	beq.n	80002e6 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 80002f4:	2028      	movs	r0, #40	; 0x28
 80002f6:	f7ff ff3b 	bl	8000170 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 80002fa:	2102      	movs	r1, #2
 80002fc:	4819      	ldr	r0, [pc, #100]	; (8000364 <DHT_Read+0x8c>)
 80002fe:	f001 fb33 	bl	8001968 <HAL_GPIO_ReadPin>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d10e      	bne.n	8000326 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	f1c3 0307 	rsb	r3, r3, #7
 800030e:	2201      	movs	r2, #1
 8000310:	fa02 f303 	lsl.w	r3, r2, r3
 8000314:	b25b      	sxtb	r3, r3
 8000316:	43db      	mvns	r3, r3
 8000318:	b25a      	sxtb	r2, r3
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	4013      	ands	r3, r2
 8000320:	b25b      	sxtb	r3, r3
 8000322:	71fb      	strb	r3, [r7, #7]
 8000324:	e00b      	b.n	800033e <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000326:	79bb      	ldrb	r3, [r7, #6]
 8000328:	f1c3 0307 	rsb	r3, r3, #7
 800032c:	2201      	movs	r2, #1
 800032e:	fa02 f303 	lsl.w	r3, r2, r3
 8000332:	b25a      	sxtb	r2, r3
 8000334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000338:	4313      	orrs	r3, r2
 800033a:	b25b      	sxtb	r3, r3
 800033c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 800033e:	bf00      	nop
 8000340:	2102      	movs	r1, #2
 8000342:	4808      	ldr	r0, [pc, #32]	; (8000364 <DHT_Read+0x8c>)
 8000344:	f001 fb10 	bl	8001968 <HAL_GPIO_ReadPin>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d1f8      	bne.n	8000340 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 800034e:	79bb      	ldrb	r3, [r7, #6]
 8000350:	3301      	adds	r3, #1
 8000352:	71bb      	strb	r3, [r7, #6]
 8000354:	79bb      	ldrb	r3, [r7, #6]
 8000356:	2b07      	cmp	r3, #7
 8000358:	d9c4      	bls.n	80002e4 <DHT_Read+0xc>
	}
	return i;
 800035a:	79fb      	ldrb	r3, [r7, #7]
}
 800035c:	4618      	mov	r0, r3
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40010800 	.word	0x40010800

08000368 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000370:	f7ff ff5c 	bl	800022c <DHT_Start>
	Presence = DHT_Check_Response ();
 8000374:	f7ff ff82 	bl	800027c <DHT_Check_Response>
 8000378:	4603      	mov	r3, r0
 800037a:	461a      	mov	r2, r3
 800037c:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <DHT_GetData+0x94>)
 800037e:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000380:	f7ff ffaa 	bl	80002d8 <DHT_Read>
 8000384:	4603      	mov	r3, r0
 8000386:	461a      	mov	r2, r3
 8000388:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <DHT_GetData+0x98>)
 800038a:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 800038c:	f7ff ffa4 	bl	80002d8 <DHT_Read>
 8000390:	4603      	mov	r3, r0
 8000392:	461a      	mov	r2, r3
 8000394:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <DHT_GetData+0x9c>)
 8000396:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000398:	f7ff ff9e 	bl	80002d8 <DHT_Read>
 800039c:	4603      	mov	r3, r0
 800039e:	461a      	mov	r2, r3
 80003a0:	4b19      	ldr	r3, [pc, #100]	; (8000408 <DHT_GetData+0xa0>)
 80003a2:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 80003a4:	f7ff ff98 	bl	80002d8 <DHT_Read>
 80003a8:	4603      	mov	r3, r0
 80003aa:	461a      	mov	r2, r3
 80003ac:	4b17      	ldr	r3, [pc, #92]	; (800040c <DHT_GetData+0xa4>)
 80003ae:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 80003b0:	f7ff ff92 	bl	80002d8 <DHT_Read>
 80003b4:	4603      	mov	r3, r0
 80003b6:	b29a      	uxth	r2, r3
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <DHT_GetData+0xa8>)
 80003ba:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80003bc:	4b14      	ldr	r3, [pc, #80]	; (8000410 <DHT_GetData+0xa8>)
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	4619      	mov	r1, r3
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <DHT_GetData+0x98>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	461a      	mov	r2, r3
 80003c8:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <DHT_GetData+0x9c>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	4413      	add	r3, r2
 80003ce:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <DHT_GetData+0xa0>)
 80003d0:	7812      	ldrb	r2, [r2, #0]
 80003d2:	4413      	add	r3, r2
 80003d4:	4a0d      	ldr	r2, [pc, #52]	; (800040c <DHT_GetData+0xa4>)
 80003d6:	7812      	ldrb	r2, [r2, #0]
 80003d8:	4413      	add	r3, r2
 80003da:	4299      	cmp	r1, r3
 80003dc:	d109      	bne.n	80003f2 <DHT_GetData+0x8a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80003de:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <DHT_GetData+0xa0>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	461a      	mov	r2, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = Rh_byte1;
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <DHT_GetData+0x98>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	461a      	mov	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	605a      	str	r2, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	200000b6 	.word	0x200000b6
 8000400:	200000b0 	.word	0x200000b0
 8000404:	200000b1 	.word	0x200000b1
 8000408:	200000b2 	.word	0x200000b2
 800040c:	200000b3 	.word	0x200000b3
 8000410:	200000b4 	.word	0x200000b4

08000414 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af02      	add	r7, sp, #8
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	f023 030f 	bic.w	r3, r3, #15
 8000424:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	011b      	lsls	r3, r3, #4
 800042a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	f043 030c 	orr.w	r3, r3, #12
 8000432:	b2db      	uxtb	r3, r3
 8000434:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000436:	7bfb      	ldrb	r3, [r7, #15]
 8000438:	f043 0308 	orr.w	r3, r3, #8
 800043c:	b2db      	uxtb	r3, r3
 800043e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000440:	7bbb      	ldrb	r3, [r7, #14]
 8000442:	f043 030c 	orr.w	r3, r3, #12
 8000446:	b2db      	uxtb	r3, r3
 8000448:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800044a:	7bbb      	ldrb	r3, [r7, #14]
 800044c:	f043 0308 	orr.w	r3, r3, #8
 8000450:	b2db      	uxtb	r3, r3
 8000452:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000454:	f107 0208 	add.w	r2, r7, #8
 8000458:	2364      	movs	r3, #100	; 0x64
 800045a:	9300      	str	r3, [sp, #0]
 800045c:	2304      	movs	r3, #4
 800045e:	214e      	movs	r1, #78	; 0x4e
 8000460:	4803      	ldr	r0, [pc, #12]	; (8000470 <lcd_send_cmd+0x5c>)
 8000462:	f001 fc0d 	bl	8001c80 <HAL_I2C_Master_Transmit>
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	200000b8 	.word	0x200000b8

08000474 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af02      	add	r7, sp, #8
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	f023 030f 	bic.w	r3, r3, #15
 8000484:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	011b      	lsls	r3, r3, #4
 800048a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	f043 030d 	orr.w	r3, r3, #13
 8000492:	b2db      	uxtb	r3, r3
 8000494:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	f043 0309 	orr.w	r3, r3, #9
 800049c:	b2db      	uxtb	r3, r3
 800049e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80004a0:	7bbb      	ldrb	r3, [r7, #14]
 80004a2:	f043 030d 	orr.w	r3, r3, #13
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80004aa:	7bbb      	ldrb	r3, [r7, #14]
 80004ac:	f043 0309 	orr.w	r3, r3, #9
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004b4:	f107 0208 	add.w	r2, r7, #8
 80004b8:	2364      	movs	r3, #100	; 0x64
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2304      	movs	r3, #4
 80004be:	214e      	movs	r1, #78	; 0x4e
 80004c0:	4803      	ldr	r0, [pc, #12]	; (80004d0 <lcd_send_data+0x5c>)
 80004c2:	f001 fbdd 	bl	8001c80 <HAL_I2C_Master_Transmit>
}
 80004c6:	bf00      	nop
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200000b8 	.word	0x200000b8

080004d4 <lcd_clear>:

void lcd_clear (void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80004da:	2080      	movs	r0, #128	; 0x80
 80004dc:	f7ff ff9a 	bl	8000414 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80004e0:	2300      	movs	r3, #0
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	e005      	b.n	80004f2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80004e6:	2020      	movs	r0, #32
 80004e8:	f7ff ffc4 	bl	8000474 <lcd_send_data>
	for (int i=0; i<70; i++)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3301      	adds	r3, #1
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b45      	cmp	r3, #69	; 0x45
 80004f6:	ddf6      	ble.n	80004e6 <lcd_clear+0x12>
	}
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b082      	sub	sp, #8
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	6039      	str	r1, [r7, #0]
    switch (row)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d003      	beq.n	800051a <lcd_put_cur+0x18>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d005      	beq.n	8000524 <lcd_put_cur+0x22>
 8000518:	e009      	b.n	800052e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000520:	603b      	str	r3, [r7, #0]
            break;
 8000522:	e004      	b.n	800052e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800052a:	603b      	str	r3, [r7, #0]
            break;
 800052c:	bf00      	nop
    }

    lcd_send_cmd (col);
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	b2db      	uxtb	r3, r3
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ff6e 	bl	8000414 <lcd_send_cmd>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <lcd_init>:


void lcd_init (void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000544:	2032      	movs	r0, #50	; 0x32
 8000546:	f000 fea9 	bl	800129c <HAL_Delay>
	lcd_send_cmd (0x30);
 800054a:	2030      	movs	r0, #48	; 0x30
 800054c:	f7ff ff62 	bl	8000414 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000550:	2005      	movs	r0, #5
 8000552:	f000 fea3 	bl	800129c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000556:	2030      	movs	r0, #48	; 0x30
 8000558:	f7ff ff5c 	bl	8000414 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800055c:	2001      	movs	r0, #1
 800055e:	f000 fe9d 	bl	800129c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000562:	2030      	movs	r0, #48	; 0x30
 8000564:	f7ff ff56 	bl	8000414 <lcd_send_cmd>
	HAL_Delay(10);
 8000568:	200a      	movs	r0, #10
 800056a:	f000 fe97 	bl	800129c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800056e:	2020      	movs	r0, #32
 8000570:	f7ff ff50 	bl	8000414 <lcd_send_cmd>
	HAL_Delay(10);
 8000574:	200a      	movs	r0, #10
 8000576:	f000 fe91 	bl	800129c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800057a:	2028      	movs	r0, #40	; 0x28
 800057c:	f7ff ff4a 	bl	8000414 <lcd_send_cmd>
	HAL_Delay(1);
 8000580:	2001      	movs	r0, #1
 8000582:	f000 fe8b 	bl	800129c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000586:	2008      	movs	r0, #8
 8000588:	f7ff ff44 	bl	8000414 <lcd_send_cmd>
	HAL_Delay(1);
 800058c:	2001      	movs	r0, #1
 800058e:	f000 fe85 	bl	800129c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000592:	2001      	movs	r0, #1
 8000594:	f7ff ff3e 	bl	8000414 <lcd_send_cmd>
	HAL_Delay(1);
 8000598:	2001      	movs	r0, #1
 800059a:	f000 fe7f 	bl	800129c <HAL_Delay>
	HAL_Delay(1);
 800059e:	2001      	movs	r0, #1
 80005a0:	f000 fe7c 	bl	800129c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80005a4:	2006      	movs	r0, #6
 80005a6:	f7ff ff35 	bl	8000414 <lcd_send_cmd>
	HAL_Delay(1);
 80005aa:	2001      	movs	r0, #1
 80005ac:	f000 fe76 	bl	800129c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80005b0:	200c      	movs	r0, #12
 80005b2:	f7ff ff2f 	bl	8000414 <lcd_send_cmd>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}

080005ba <lcd_send_string>:

void lcd_send_string (char *str)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b082      	sub	sp, #8
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80005c2:	e006      	b.n	80005d2 <lcd_send_string+0x18>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	607a      	str	r2, [r7, #4]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ff51 	bl	8000474 <lcd_send_data>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1f4      	bne.n	80005c4 <lcd_send_string+0xa>
}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fdf6 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f862 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f94a 	bl	8000888 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005f4:	f000 f8a4 	bl	8000740 <MX_I2C1_Init>
  MX_TIM2_Init();
 80005f8:	f000 f8d0 	bl	800079c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005fc:	f000 f91a 	bl	8000834 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000600:	f7ff ff9e 	bl	8000540 <lcd_init>
  HAL_UART_Receive_IT(&huart1, (uint8_t*) &t[2], 18);
 8000604:	2212      	movs	r2, #18
 8000606:	4925      	ldr	r1, [pc, #148]	; (800069c <main+0xb8>)
 8000608:	4825      	ldr	r0, [pc, #148]	; (80006a0 <main+0xbc>)
 800060a:	f002 fe12 	bl	8003232 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  time=HAL_GetTick();
 800060e:	f000 fe3b 	bl	8001288 <HAL_GetTick>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <main+0xc0>)
 8000618:	601a      	str	r2, [r3, #0]
	  if(time%140==0)
 800061a:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <main+0xc0>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <main+0xc4>)
 8000620:	fb82 1203 	smull	r1, r2, r2, r3
 8000624:	441a      	add	r2, r3
 8000626:	11d1      	asrs	r1, r2, #7
 8000628:	17da      	asrs	r2, r3, #31
 800062a:	1a8a      	subs	r2, r1, r2
 800062c:	218c      	movs	r1, #140	; 0x8c
 800062e:	fb01 f202 	mul.w	r2, r1, r2
 8000632:	1a9a      	subs	r2, r3, r2
 8000634:	2a00      	cmp	r2, #0
 8000636:	d101      	bne.n	800063c <main+0x58>
	  {
		  task_hander();
 8000638:	f000 fbe4 	bl	8000e04 <task_hander>
	  }
	  time=HAL_GetTick();
 800063c:	f000 fe24 	bl	8001288 <HAL_GetTick>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <main+0xc0>)
 8000646:	601a      	str	r2, [r3, #0]
	  if(time%190==0)
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <main+0xc0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a17      	ldr	r2, [pc, #92]	; (80006ac <main+0xc8>)
 800064e:	fb82 1203 	smull	r1, r2, r2, r3
 8000652:	441a      	add	r2, r3
 8000654:	11d1      	asrs	r1, r2, #7
 8000656:	17da      	asrs	r2, r3, #31
 8000658:	1a8a      	subs	r2, r1, r2
 800065a:	21be      	movs	r1, #190	; 0xbe
 800065c:	fb01 f202 	mul.w	r2, r1, r2
 8000660:	1a9a      	subs	r2, r3, r2
 8000662:	2a00      	cmp	r2, #0
 8000664:	d101      	bne.n	800066a <main+0x86>
	  {
		  task_disphay_2();
 8000666:	f000 fbf7 	bl	8000e58 <task_disphay_2>
	  }
	  time=HAL_GetTick();
 800066a:	f000 fe0d 	bl	8001288 <HAL_GetTick>
 800066e:	4603      	mov	r3, r0
 8000670:	461a      	mov	r2, r3
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <main+0xc0>)
 8000674:	601a      	str	r2, [r3, #0]
	  if(time%(cycle*1000)==0)
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <main+0xc0>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <main+0xcc>)
 800067c:	6812      	ldr	r2, [r2, #0]
 800067e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000682:	fb01 f202 	mul.w	r2, r1, r2
 8000686:	fb93 f1f2 	sdiv	r1, r3, r2
 800068a:	fb01 f202 	mul.w	r2, r1, r2
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1bc      	bne.n	800060e <main+0x2a>
	  {
		  task_disphay_1();
 8000694:	f000 fbca 	bl	8000e2c <task_disphay_1>
	  time=HAL_GetTick();
 8000698:	e7b9      	b.n	800060e <main+0x2a>
 800069a:	bf00      	nop
 800069c:	20000002 	.word	0x20000002
 80006a0:	20000154 	.word	0x20000154
 80006a4:	200001bc 	.word	0x200001bc
 80006a8:	ea0ea0eb 	.word	0xea0ea0eb
 80006ac:	ac769185 	.word	0xac769185
 80006b0:	20000014 	.word	0x20000014

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b090      	sub	sp, #64	; 0x40
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	2228      	movs	r2, #40	; 0x28
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fa3e 	bl	8003b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d6:	2301      	movs	r3, #1
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0318 	add.w	r3, r7, #24
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fdc5 	bl	800228c <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000708:	f000 fbde 	bl	8000ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2302      	movs	r3, #2
 8000712:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2102      	movs	r1, #2
 8000726:	4618      	mov	r0, r3
 8000728:	f002 f832 	bl	8002790 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000732:	f000 fbc9 	bl	8000ec8 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3740      	adds	r7, #64	; 0x40
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2C1_Init+0x50>)
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <MX_I2C1_Init+0x54>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2C1_Init+0x50>)
 800074c:	4a12      	ldr	r2, [pc, #72]	; (8000798 <MX_I2C1_Init+0x58>)
 800074e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_I2C1_Init+0x50>)
 800075e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000762:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_I2C1_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_I2C1_Init+0x50>)
 800077e:	f001 f93b 	bl	80019f8 <HAL_I2C_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 fb9e 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200000b8 	.word	0x200000b8
 8000794:	40005400 	.word	0x40005400
 8000798:	000186a0 	.word	0x000186a0

0800079c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b0:	463b      	mov	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <MX_TIM2_Init+0x94>)
 80007ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_TIM2_Init+0x94>)
 80007c2:	2247      	movs	r2, #71	; 0x47
 80007c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_TIM2_Init+0x94>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_TIM2_Init+0x94>)
 80007ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_TIM2_Init+0x94>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_TIM2_Init+0x94>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e0:	4813      	ldr	r0, [pc, #76]	; (8000830 <MX_TIM2_Init+0x94>)
 80007e2:	f002 f96d 	bl	8002ac0 <HAL_TIM_Base_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007ec:	f000 fb6c 	bl	8000ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	4619      	mov	r1, r3
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <MX_TIM2_Init+0x94>)
 80007fe:	f002 fa1f 	bl	8002c40 <HAL_TIM_ConfigClockSource>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000808:	f000 fb5e 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_TIM2_Init+0x94>)
 800081a:	f002 fbcd 	bl	8002fb8 <HAL_TIMEx_MasterConfigSynchronization>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000824:	f000 fb50 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000010c 	.word	0x2000010c

08000834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MX_USART1_UART_Init+0x50>)
 800083c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 800086c:	f002 fc02 	bl	8003074 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000876:	f000 fb27 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000154 	.word	0x20000154
 8000884:	40013800 	.word	0x40013800

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089c:	4b2b      	ldr	r3, [pc, #172]	; (800094c <MX_GPIO_Init+0xc4>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a2a      	ldr	r2, [pc, #168]	; (800094c <MX_GPIO_Init+0xc4>)
 80008a2:	f043 0320 	orr.w	r3, r3, #32
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b28      	ldr	r3, [pc, #160]	; (800094c <MX_GPIO_Init+0xc4>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0320 	and.w	r3, r3, #32
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b4:	4b25      	ldr	r3, [pc, #148]	; (800094c <MX_GPIO_Init+0xc4>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a24      	ldr	r2, [pc, #144]	; (800094c <MX_GPIO_Init+0xc4>)
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b22      	ldr	r3, [pc, #136]	; (800094c <MX_GPIO_Init+0xc4>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008cc:	4b1f      	ldr	r3, [pc, #124]	; (800094c <MX_GPIO_Init+0xc4>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a1e      	ldr	r2, [pc, #120]	; (800094c <MX_GPIO_Init+0xc4>)
 80008d2:	f043 0308 	orr.w	r3, r3, #8
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_GPIO_Init+0xc4>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0308 	and.w	r3, r3, #8
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2102      	movs	r1, #2
 80008e8:	4819      	ldr	r0, [pc, #100]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008ea:	f001 f854 	bl	8001996 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008ee:	2302      	movs	r3, #2
 80008f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	4619      	mov	r1, r3
 8000904:	4812      	ldr	r0, [pc, #72]	; (8000950 <MX_GPIO_Init+0xc8>)
 8000906:	f000 feab 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800090a:	230c      	movs	r3, #12
 800090c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_GPIO_Init+0xcc>)
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000912:	2301      	movs	r3, #1
 8000914:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	4619      	mov	r1, r3
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_GPIO_Init+0xc8>)
 800091e:	f000 fe9f 	bl	8001660 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2101      	movs	r1, #1
 8000926:	2008      	movs	r0, #8
 8000928:	f000 fdb3 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800092c:	2008      	movs	r0, #8
 800092e:	f000 fdcc 	bl	80014ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2101      	movs	r1, #1
 8000936:	2009      	movs	r0, #9
 8000938:	f000 fdab 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800093c:	2009      	movs	r0, #9
 800093e:	f000 fdc4 	bl	80014ca <HAL_NVIC_EnableIRQ>

}
 8000942:	bf00      	nop
 8000944:	3720      	adds	r7, #32
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000
 8000950:	40010800 	.word	0x40010800
 8000954:	10210000 	.word	0x10210000

08000958 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
/*Hàm này sẽ được gọi khi có ngắt ngoài xảy ra */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
	if(GPIO_Pin==GPIO_PIN_2)// Nếu là ngắt ngoài 2 thì ta sẽ tăng chu kì lên 1
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	2b04      	cmp	r3, #4
 8000966:	d11d      	bne.n	80009a4 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		currentTime=HAL_GetTick();
 8000968:	f000 fc8e 	bl	8001288 <HAL_GetTick>
 800096c:	4603      	mov	r3, r0
 800096e:	461a      	mov	r2, r3
 8000970:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000972:	601a      	str	r2, [r3, #0]
		if((currentTime-lastTime>300)&&(mode==1))// chờ 300ms để chống nhiễu và phải ở chế độ 1
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <HAL_GPIO_EXTI_Callback+0xa0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000982:	dd0b      	ble.n	800099c <HAL_GPIO_EXTI_Callback+0x44>
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <HAL_GPIO_EXTI_Callback+0xa4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d107      	bne.n	800099c <HAL_GPIO_EXTI_Callback+0x44>
		{
			cycle=cycle+1;
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <HAL_GPIO_EXTI_Callback+0xa8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000994:	6013      	str	r3, [r2, #0]
			flag=1;
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <HAL_GPIO_EXTI_Callback+0xac>)
 8000998:	2201      	movs	r2, #1
 800099a:	601a      	str	r2, [r3, #0]

		}
		lastTime=currentTime;
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_GPIO_EXTI_Callback+0x9c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <HAL_GPIO_EXTI_Callback+0xa0>)
 80009a2:	6013      	str	r3, [r2, #0]
	}
	if(GPIO_Pin==GPIO_PIN_3)//Nếu là ngắt ngoài 3 thì ta sẽ đổi mode
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	2b08      	cmp	r3, #8
 80009a8:	d11c      	bne.n	80009e4 <HAL_GPIO_EXTI_Callback+0x8c>
		{
			currentTime=HAL_GetTick();
 80009aa:	f000 fc6d 	bl	8001288 <HAL_GetTick>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <HAL_GPIO_EXTI_Callback+0x9c>)
 80009b4:	601a      	str	r2, [r3, #0]
			if(currentTime-lastTime>300)// Đảm bảo giữa 2 lần ngắt là 300ms nhằm chống dội phím
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_GPIO_EXTI_Callback+0x9c>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_GPIO_EXTI_Callback+0xa0>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009c4:	dd0a      	ble.n	80009dc <HAL_GPIO_EXTI_Callback+0x84>
			{
				if(mode==1)
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <HAL_GPIO_EXTI_Callback+0xa4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d103      	bne.n	80009d6 <HAL_GPIO_EXTI_Callback+0x7e>
					mode=2;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <HAL_GPIO_EXTI_Callback+0xa4>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	e002      	b.n	80009dc <HAL_GPIO_EXTI_Callback+0x84>
				else
					mode=1;
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_GPIO_EXTI_Callback+0xa4>)
 80009d8:	2201      	movs	r2, #1
 80009da:	601a      	str	r2, [r3, #0]
			}
			lastTime=currentTime;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_GPIO_EXTI_Callback+0x9c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <HAL_GPIO_EXTI_Callback+0xa0>)
 80009e2:	6013      	str	r3, [r2, #0]

		}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);/// xóa cờ báo ngắt
 80009e4:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_GPIO_EXTI_Callback+0xb0>)
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	6153      	str	r3, [r2, #20]
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200001b4 	.word	0x200001b4
 80009f8:	200001b8 	.word	0x200001b8
 80009fc:	20000018 	.word	0x20000018
 8000a00:	20000014 	.word	0x20000014
 8000a04:	200001c0 	.word	0x200001c0
 8000a08:	40010400 	.word	0x40010400

08000a0c <HAL_UART_RxCpltCallback>:
/*Hàm này sẽ được gọi khi có dữ liệu từ máy tính gửi xuống
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &t[2], 18);// Đăng kí nơi lưu dữ liệu từ máy tính gửi xuống
 8000a14:	2212      	movs	r2, #18
 8000a16:	490f      	ldr	r1, [pc, #60]	; (8000a54 <HAL_UART_RxCpltCallback+0x48>)
 8000a18:	480f      	ldr	r0, [pc, #60]	; (8000a58 <HAL_UART_RxCpltCallback+0x4c>)
 8000a1a:	f002 fc0a 	bl	8003232 <HAL_UART_Receive_IT>
	strncpy(k,"",20);// xóa nơi lưu trữ để nhận dữ liệu mới
 8000a1e:	2214      	movs	r2, #20
 8000a20:	490e      	ldr	r1, [pc, #56]	; (8000a5c <HAL_UART_RxCpltCallback+0x50>)
 8000a22:	480f      	ldr	r0, [pc, #60]	; (8000a60 <HAL_UART_RxCpltCallback+0x54>)
 8000a24:	f003 f8b6 	bl	8003b94 <strncpy>
	strncpy(k,&t[2],strlen(&t[2])-2);// xóa nơi lưu trữ để nhận dữ liệu mới
 8000a28:	480a      	ldr	r0, [pc, #40]	; (8000a54 <HAL_UART_RxCpltCallback+0x48>)
 8000a2a:	f7ff fb99 	bl	8000160 <strlen>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	3b02      	subs	r3, #2
 8000a32:	461a      	mov	r2, r3
 8000a34:	4907      	ldr	r1, [pc, #28]	; (8000a54 <HAL_UART_RxCpltCallback+0x48>)
 8000a36:	480a      	ldr	r0, [pc, #40]	; (8000a60 <HAL_UART_RxCpltCallback+0x54>)
 8000a38:	f003 f8ac 	bl	8003b94 <strncpy>
	strncpy(t,"",20);// xóa nơi lưu trữ ban đầu để chuẩn bị nhận dữ liệu tiếp theo
 8000a3c:	2214      	movs	r2, #20
 8000a3e:	4907      	ldr	r1, [pc, #28]	; (8000a5c <HAL_UART_RxCpltCallback+0x50>)
 8000a40:	4808      	ldr	r0, [pc, #32]	; (8000a64 <HAL_UART_RxCpltCallback+0x58>)
 8000a42:	f003 f8a7 	bl	8003b94 <strncpy>
	flag=1;// bật cờ báo có dữ liệu gửi xuống
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_UART_RxCpltCallback+0x5c>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	601a      	str	r2, [r3, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000002 	.word	0x20000002
 8000a58:	20000154 	.word	0x20000154
 8000a5c:	08004594 	.word	0x08004594
 8000a60:	20000198 	.word	0x20000198
 8000a64:	20000000 	.word	0x20000000
 8000a68:	200001c0 	.word	0x200001c0

08000a6c <get_data>:
//		strncpy(p,"",20);
//	}
//
//}
void get_data(char *p)// hàm xử lí dữ liệu từ máy tính truyền xuống, tham số truyền vào là địa chỉ của mảng lưu trữ dữ liệu
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	int cycle_1, m, n;
	if(mode == 1)// nếu là mode 1 thì dữ liệu sẽ là chu kì và sẽ chuyển đổi từ kí tự sang số
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <get_data+0x88>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d109      	bne.n	8000a90 <get_data+0x24>
	{
		cycle_1=atoi(p);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f003 f833 	bl	8003ae8 <atoi>
 8000a82:	6178      	str	r0, [r7, #20]
		if(cycle_1>0)
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	dd02      	ble.n	8000a90 <get_data+0x24>
		{
			cycle=cycle_1;
 8000a8a:	4a1b      	ldr	r2, [pc, #108]	; (8000af8 <get_data+0x8c>)
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	6013      	str	r3, [r2, #0]
		}
	}
	if(mode == 2)// Nếu lầ mode 2 thì dữ liệu là thông số nhiệt độ hoặc độ ẩm
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <get_data+0x88>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d125      	bne.n	8000ae4 <get_data+0x78>
	{
		m=strcmp(p,"nhiet do ");
 8000a98:	4918      	ldr	r1, [pc, #96]	; (8000afc <get_data+0x90>)
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff fb56 	bl	800014c <strcmp>
 8000aa0:	6138      	str	r0, [r7, #16]
		n=strcmp(p,"do am ");
 8000aa2:	4917      	ldr	r1, [pc, #92]	; (8000b00 <get_data+0x94>)
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff fb51 	bl	800014c <strcmp>
 8000aaa:	60f8      	str	r0, [r7, #12]
		if((m==0)&&(n!=0))// so sánh chuỗi nhận được
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d10a      	bne.n	8000ac8 <get_data+0x5c>
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d007      	beq.n	8000ac8 <get_data+0x5c>
		{
			para=1;          // nếu là nhiệt độ para=1
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <get_data+0x98>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	601a      	str	r2, [r3, #0]
			strncpy(p,"",20);
 8000abe:	2214      	movs	r2, #20
 8000ac0:	4911      	ldr	r1, [pc, #68]	; (8000b08 <get_data+0x9c>)
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f003 f866 	bl	8003b94 <strncpy>
		}
		if((m!=0)&&(n==0))
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00a      	beq.n	8000ae4 <get_data+0x78>
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d107      	bne.n	8000ae4 <get_data+0x78>
		{
			para=2;				// nếu là độ ẩm para=2
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <get_data+0x98>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	601a      	str	r2, [r3, #0]
			strncpy(p,"",20);
 8000ada:	2214      	movs	r2, #20
 8000adc:	490a      	ldr	r1, [pc, #40]	; (8000b08 <get_data+0x9c>)
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f003 f858 	bl	8003b94 <strncpy>
		}
	}
	flag_1=1;// bật cờ báo là hiển thị dữ liệu yêu cầu từ máy tính gửi xuống
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <get_data+0xa0>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	601a      	str	r2, [r3, #0]
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000018 	.word	0x20000018
 8000af8:	20000014 	.word	0x20000014
 8000afc:	08004598 	.word	0x08004598
 8000b00:	080045a4 	.word	0x080045a4
 8000b04:	2000001c 	.word	0x2000001c
 8000b08:	08004594 	.word	0x08004594
 8000b0c:	20000020 	.word	0x20000020

08000b10 <display_mode_1>:

void display_mode_1(DHT_DataTypedef data)// Hàm hiển thị dữ liệu ở chế độ 1, tham số truyền vào là 1 struct có chứa nhiệt đọ, độ ẩm
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	463b      	mov	r3, r7
 8000b18:	e883 0003 	stmia.w	r3, {r0, r1}
	char row_1[16], row_2[16];

	lcd_put_cur(0,0);
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f7ff fcef 	bl	8000502 <lcd_put_cur>
	strcpy(row_1,"Mode:1");
 8000b24:	f107 0318 	add.w	r3, r7, #24
 8000b28:	4a24      	ldr	r2, [pc, #144]	; (8000bbc <display_mode_1+0xac>)
 8000b2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b2e:	6018      	str	r0, [r3, #0]
 8000b30:	3304      	adds	r3, #4
 8000b32:	8019      	strh	r1, [r3, #0]
 8000b34:	3302      	adds	r3, #2
 8000b36:	0c0a      	lsrs	r2, r1, #16
 8000b38:	701a      	strb	r2, [r3, #0]
	strcpy(&row_1[6]," Cycle:");// copy chuỗi vào mảng
 8000b3a:	f107 0318 	add.w	r3, r7, #24
 8000b3e:	3306      	adds	r3, #6
 8000b40:	491f      	ldr	r1, [pc, #124]	; (8000bc0 <display_mode_1+0xb0>)
 8000b42:	461a      	mov	r2, r3
 8000b44:	460b      	mov	r3, r1
 8000b46:	cb03      	ldmia	r3!, {r0, r1}
 8000b48:	6010      	str	r0, [r2, #0]
 8000b4a:	6051      	str	r1, [r2, #4]
	sprintf(&row_1[13],"%d",cycle);// hàm chuyển đổi số sang chuỗi
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <display_mode_1+0xb4>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	f107 0318 	add.w	r3, r7, #24
 8000b54:	330d      	adds	r3, #13
 8000b56:	491c      	ldr	r1, [pc, #112]	; (8000bc8 <display_mode_1+0xb8>)
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f002 fffb 	bl	8003b54 <siprintf>
	lcd_send_string(row_1); // hàm hiển thị ra LCD
 8000b5e:	f107 0318 	add.w	r3, r7, #24
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fd29 	bl	80005ba <lcd_send_string>

	lcd_put_cur(1,0);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f7ff fcc9 	bl	8000502 <lcd_put_cur>
	strcpy(row_2,"ND:");
 8000b70:	f107 0308 	add.w	r3, r7, #8
 8000b74:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <display_mode_1+0xbc>)
 8000b76:	601a      	str	r2, [r3, #0]
	sprintf(&row_2[3],"%d",data.Temperature);
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	3303      	adds	r3, #3
 8000b80:	4911      	ldr	r1, [pc, #68]	; (8000bc8 <display_mode_1+0xb8>)
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 ffe6 	bl	8003b54 <siprintf>
	strcpy(&row_2[5]," DA:");
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	3305      	adds	r3, #5
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <display_mode_1+0xc0>)
 8000b90:	6810      	ldr	r0, [r2, #0]
 8000b92:	6018      	str	r0, [r3, #0]
 8000b94:	7912      	ldrb	r2, [r2, #4]
 8000b96:	711a      	strb	r2, [r3, #4]
	sprintf(&row_2[9],"%d",data.Humidity);
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	3309      	adds	r3, #9
 8000ba0:	4909      	ldr	r1, [pc, #36]	; (8000bc8 <display_mode_1+0xb8>)
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 ffd6 	bl	8003b54 <siprintf>
	lcd_send_string(row_2);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fd04 	bl	80005ba <lcd_send_string>
}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	080045ac 	.word	0x080045ac
 8000bc0:	080045b4 	.word	0x080045b4
 8000bc4:	20000014 	.word	0x20000014
 8000bc8:	080045bc 	.word	0x080045bc
 8000bcc:	003a444e 	.word	0x003a444e
 8000bd0:	080045c0 	.word	0x080045c0

08000bd4 <display_mode_2>:
void display_mode_2(int data, int para)// Hàm hiển thị dữ liệu ở chế độ 2, tham số truyền vào là dữ liệu nhiệt độ hay độ ẩm và thông số muốn hiển thị
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
	char row_2[5];
	lcd_clear();
 8000bde:	f7ff fc79 	bl	80004d4 <lcd_clear>
	lcd_put_cur(0,0);
 8000be2:	2100      	movs	r1, #0
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff fc8c 	bl	8000502 <lcd_put_cur>
	lcd_send_string("Mode:2");
 8000bea:	481b      	ldr	r0, [pc, #108]	; (8000c58 <display_mode_2+0x84>)
 8000bec:	f7ff fce5 	bl	80005ba <lcd_send_string>
	if(para==1)// nếu yêu cầu nhiệt độ sẽ hiển thị nhiệt độ
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d114      	bne.n	8000c20 <display_mode_2+0x4c>
	{
		lcd_put_cur(1,0);
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f7ff fc82 	bl	8000502 <lcd_put_cur>
		strcpy(row_2,"ND:");
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <display_mode_2+0x88>)
 8000c04:	601a      	str	r2, [r3, #0]
		sprintf(&row_2[3],"%d",data);
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	3303      	adds	r3, #3
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	4914      	ldr	r1, [pc, #80]	; (8000c60 <display_mode_2+0x8c>)
 8000c10:	4618      	mov	r0, r3
 8000c12:	f002 ff9f 	bl	8003b54 <siprintf>
		lcd_send_string(row_2);
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fccd 	bl	80005ba <lcd_send_string>
	}
	if(para==2)// nếu yêu cầu độ ẩm sẽ hiển thị độ ẩm
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d114      	bne.n	8000c50 <display_mode_2+0x7c>
	{
		lcd_put_cur(1,0);
 8000c26:	2100      	movs	r1, #0
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff fc6a 	bl	8000502 <lcd_put_cur>
		strcpy(row_2,"DA:");
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	4a0c      	ldr	r2, [pc, #48]	; (8000c64 <display_mode_2+0x90>)
 8000c34:	601a      	str	r2, [r3, #0]
		sprintf(&row_2[3],"%d",data);
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	3303      	adds	r3, #3
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <display_mode_2+0x8c>)
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 ff87 	bl	8003b54 <siprintf>
		lcd_send_string(row_2);
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fcb5 	bl	80005ba <lcd_send_string>
	}
}
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	080045c8 	.word	0x080045c8
 8000c5c:	003a444e 	.word	0x003a444e
 8000c60:	080045bc 	.word	0x080045bc
 8000c64:	003a4144 	.word	0x003a4144

08000c68 <display_cycle>:
void display_cycle()// Hàm hiển thị chu kì
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
	if(mode==1)
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <display_cycle+0x68>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d127      	bne.n	8000cc6 <display_cycle+0x5e>
	{
		lcd_put_cur(0,0);
 8000c76:	2100      	movs	r1, #0
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff fc42 	bl	8000502 <lcd_put_cur>
		lcd_send_string("Mode:1");
 8000c7e:	4815      	ldr	r0, [pc, #84]	; (8000cd4 <display_cycle+0x6c>)
 8000c80:	f7ff fc9b 	bl	80005ba <lcd_send_string>
		if((cycle>9)||(cycle<2))// giới hạn chu kì từ 2-9 s
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <display_cycle+0x70>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b09      	cmp	r3, #9
 8000c8a:	dc03      	bgt.n	8000c94 <display_cycle+0x2c>
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <display_cycle+0x70>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	dc02      	bgt.n	8000c9a <display_cycle+0x32>
		{
			cycle=2;
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <display_cycle+0x70>)
 8000c96:	2202      	movs	r2, #2
 8000c98:	601a      	str	r2, [r3, #0]
		}
		char row_1[10];
		lcd_put_cur(0,6);
 8000c9a:	2106      	movs	r1, #6
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff fc30 	bl	8000502 <lcd_put_cur>
		strcpy(row_1," Cycle:");
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <display_cycle+0x74>)
 8000ca6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000caa:	e883 0003 	stmia.w	r3, {r0, r1}
		sprintf(&row_1[7],"%d",cycle);
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <display_cycle+0x70>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	3307      	adds	r3, #7
 8000cb6:	490a      	ldr	r1, [pc, #40]	; (8000ce0 <display_cycle+0x78>)
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 ff4b 	bl	8003b54 <siprintf>
		lcd_send_string(row_1);
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fc7a 	bl	80005ba <lcd_send_string>
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000018 	.word	0x20000018
 8000cd4:	080045ac 	.word	0x080045ac
 8000cd8:	20000014 	.word	0x20000014
 8000cdc:	080045b4 	.word	0x080045b4
 8000ce0:	080045bc 	.word	0x080045bc

08000ce4 <transmit_data_from_computer>:
void transmit_data_from_computer()// Hàm truyền dữ liệu lên máy tính
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af00      	add	r7, sp, #0
	if(mode==1)// nếu là mode 1 sẽ truyền đầy đủ
 8000cea:	4b3d      	ldr	r3, [pc, #244]	; (8000de0 <transmit_data_from_computer+0xfc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d12c      	bne.n	8000d4c <transmit_data_from_computer+0x68>
	{
		char row_2[24];
		strcpy(row_2,"Nhiet do:");
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	4a3b      	ldr	r2, [pc, #236]	; (8000de4 <transmit_data_from_computer+0x100>)
 8000cf8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cfa:	c303      	stmia	r3!, {r0, r1}
 8000cfc:	801a      	strh	r2, [r3, #0]
		sprintf(&row_2[9],"%d",data.Temperature);
 8000cfe:	4b3a      	ldr	r3, [pc, #232]	; (8000de8 <transmit_data_from_computer+0x104>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	f107 0320 	add.w	r3, r7, #32
 8000d06:	3309      	adds	r3, #9
 8000d08:	4938      	ldr	r1, [pc, #224]	; (8000dec <transmit_data_from_computer+0x108>)
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 ff22 	bl	8003b54 <siprintf>
		strcpy(&row_2[11]," Do am:");
 8000d10:	f107 0320 	add.w	r3, r7, #32
 8000d14:	330b      	adds	r3, #11
 8000d16:	4936      	ldr	r1, [pc, #216]	; (8000df0 <transmit_data_from_computer+0x10c>)
 8000d18:	461a      	mov	r2, r3
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	cb03      	ldmia	r3!, {r0, r1}
 8000d1e:	6010      	str	r0, [r2, #0]
 8000d20:	6051      	str	r1, [r2, #4]
		sprintf(&row_2[18],"%d",data.Humidity);
 8000d22:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <transmit_data_from_computer+0x104>)
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	3312      	adds	r3, #18
 8000d2c:	492f      	ldr	r1, [pc, #188]	; (8000dec <transmit_data_from_computer+0x108>)
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 ff10 	bl	8003b54 <siprintf>
		strcpy(&row_2[20],"\n");
 8000d34:	f107 0320 	add.w	r3, r7, #32
 8000d38:	3314      	adds	r3, #20
 8000d3a:	220a      	movs	r2, #10
 8000d3c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1,(uint8_t*)row_2,21,200);
 8000d3e:	f107 0120 	add.w	r1, r7, #32
 8000d42:	23c8      	movs	r3, #200	; 0xc8
 8000d44:	2215      	movs	r2, #21
 8000d46:	482b      	ldr	r0, [pc, #172]	; (8000df4 <transmit_data_from_computer+0x110>)
 8000d48:	f002 f9e1 	bl	800310e <HAL_UART_Transmit>
	}
	if(mode==2)// nếu là mode 2 sẽ truyền theo yêu cầu
 8000d4c:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <transmit_data_from_computer+0xfc>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d141      	bne.n	8000dd8 <transmit_data_from_computer+0xf4>
	{
		if(para==1)
 8000d54:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <transmit_data_from_computer+0x114>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d11d      	bne.n	8000d98 <transmit_data_from_computer+0xb4>
		{
			char row_2[13];
			strcpy(row_2,"Nhiet do:");
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	4a20      	ldr	r2, [pc, #128]	; (8000de4 <transmit_data_from_computer+0x100>)
 8000d62:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d64:	c303      	stmia	r3!, {r0, r1}
 8000d66:	801a      	strh	r2, [r3, #0]
			sprintf(&row_2[9],"%d",data.Temperature);
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <transmit_data_from_computer+0x104>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	3309      	adds	r3, #9
 8000d72:	491e      	ldr	r1, [pc, #120]	; (8000dec <transmit_data_from_computer+0x108>)
 8000d74:	4618      	mov	r0, r3
 8000d76:	f002 feed 	bl	8003b54 <siprintf>
			strcpy(&row_2[11],"\n");
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	330b      	adds	r3, #11
 8000d80:	491e      	ldr	r1, [pc, #120]	; (8000dfc <transmit_data_from_computer+0x118>)
 8000d82:	461a      	mov	r2, r3
 8000d84:	460b      	mov	r3, r1
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)row_2,12,100);
 8000d8a:	f107 0110 	add.w	r1, r7, #16
 8000d8e:	2364      	movs	r3, #100	; 0x64
 8000d90:	220c      	movs	r2, #12
 8000d92:	4818      	ldr	r0, [pc, #96]	; (8000df4 <transmit_data_from_computer+0x110>)
 8000d94:	f002 f9bb 	bl	800310e <HAL_UART_Transmit>
		}
		if(para==2)
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <transmit_data_from_computer+0x114>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d11b      	bne.n	8000dd8 <transmit_data_from_computer+0xf4>
		{
			char row_2[10];
			strcpy(row_2,"Do am:");
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <transmit_data_from_computer+0x11c>)
 8000da4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000da8:	6018      	str	r0, [r3, #0]
 8000daa:	3304      	adds	r3, #4
 8000dac:	8019      	strh	r1, [r3, #0]
 8000dae:	3302      	adds	r3, #2
 8000db0:	0c0a      	lsrs	r2, r1, #16
 8000db2:	701a      	strb	r2, [r3, #0]
			sprintf(&row_2[6],"%d",data.Humidity);
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <transmit_data_from_computer+0x104>)
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	3306      	adds	r3, #6
 8000dbc:	490b      	ldr	r1, [pc, #44]	; (8000dec <transmit_data_from_computer+0x108>)
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 fec8 	bl	8003b54 <siprintf>
			strcpy(&row_2[8],"\n");
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	3308      	adds	r3, #8
 8000dc8:	220a      	movs	r2, #10
 8000dca:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)row_2,9,100);
 8000dcc:	1d39      	adds	r1, r7, #4
 8000dce:	2364      	movs	r3, #100	; 0x64
 8000dd0:	2209      	movs	r2, #9
 8000dd2:	4808      	ldr	r0, [pc, #32]	; (8000df4 <transmit_data_from_computer+0x110>)
 8000dd4:	f002 f99b 	bl	800310e <HAL_UART_Transmit>
		}
	}
}
 8000dd8:	bf00      	nop
 8000dda:	3738      	adds	r7, #56	; 0x38
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000018 	.word	0x20000018
 8000de4:	080045d0 	.word	0x080045d0
 8000de8:	200001ac 	.word	0x200001ac
 8000dec:	080045bc 	.word	0x080045bc
 8000df0:	080045dc 	.word	0x080045dc
 8000df4:	20000154 	.word	0x20000154
 8000df8:	2000001c 	.word	0x2000001c
 8000dfc:	080045e4 	.word	0x080045e4
 8000e00:	080045e8 	.word	0x080045e8

08000e04 <task_hander>:
void task_hander()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	if(flag==1)// nếu có dữ liệu gửi xuống thì sẽ xử lí
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <task_hander+0x20>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d107      	bne.n	8000e20 <task_hander+0x1c>
	{
		get_data(k);
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <task_hander+0x24>)
 8000e12:	f7ff fe2b 	bl	8000a6c <get_data>
		display_cycle();
 8000e16:	f7ff ff27 	bl	8000c68 <display_cycle>
		flag=0;// xóa cờ báo
 8000e1a:	4b02      	ldr	r3, [pc, #8]	; (8000e24 <task_hander+0x20>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
	}
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200001c0 	.word	0x200001c0
 8000e28:	20000198 	.word	0x20000198

08000e2c <task_disphay_1>:
void task_disphay_1()
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	if(mode==1)// neus là mode 1 sẽ xử lí ở chế độ 1
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <task_disphay_1+0x24>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d109      	bne.n	8000e4c <task_disphay_1+0x20>
	{
		DHT_GetData(&data);
 8000e38:	4806      	ldr	r0, [pc, #24]	; (8000e54 <task_disphay_1+0x28>)
 8000e3a:	f7ff fa95 	bl	8000368 <DHT_GetData>
		display_mode_1(data);
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <task_disphay_1+0x28>)
 8000e40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e44:	f7ff fe64 	bl	8000b10 <display_mode_1>
		transmit_data_from_computer();
 8000e48:	f7ff ff4c 	bl	8000ce4 <transmit_data_from_computer>
	}
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000018 	.word	0x20000018
 8000e54:	200001ac 	.word	0x200001ac

08000e58 <task_disphay_2>:
void task_disphay_2()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	if(mode==2)// nếu là mode 2
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <task_disphay_2+0x60>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d126      	bne.n	8000eb2 <task_disphay_2+0x5a>
	{
		if(flag_1==1)// nếu có yêu cầu từ máy tính
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <task_disphay_2+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d122      	bne.n	8000eb2 <task_disphay_2+0x5a>
		{
			DHT_GetData(&data);
 8000e6c:	4814      	ldr	r0, [pc, #80]	; (8000ec0 <task_disphay_2+0x68>)
 8000e6e:	f7ff fa7b 	bl	8000368 <DHT_GetData>
			transmit_data_from_computer();
 8000e72:	f7ff ff37 	bl	8000ce4 <transmit_data_from_computer>
			if(para==1)
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <task_disphay_2+0x6c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d10a      	bne.n	8000e94 <task_disphay_2+0x3c>
			{
				display_mode_2(data.Temperature,para);
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <task_disphay_2+0x68>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <task_disphay_2+0x6c>)
 8000e84:	6812      	ldr	r2, [r2, #0]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fea3 	bl	8000bd4 <display_mode_2>
				flag_1=0; //xóa cờ báo
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <task_disphay_2+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
			}
			if(para==2)
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <task_disphay_2+0x6c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d10a      	bne.n	8000eb2 <task_disphay_2+0x5a>
			{
				display_mode_2(data.Humidity,para);
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <task_disphay_2+0x68>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <task_disphay_2+0x6c>)
 8000ea2:	6812      	ldr	r2, [r2, #0]
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fe94 	bl	8000bd4 <display_mode_2>
				flag_1=0;// xóa cờ báo
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <task_disphay_2+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000018 	.word	0x20000018
 8000ebc:	20000020 	.word	0x20000020
 8000ec0:	200001ac 	.word	0x200001ac
 8000ec4:	2000001c 	.word	0x2000001c

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <Error_Handler+0x8>
	...

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_MspInit+0x5c>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <HAL_MspInit+0x5c>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6193      	str	r3, [r2, #24]
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_MspInit+0x5c>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <HAL_MspInit+0x5c>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <HAL_MspInit+0x5c>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	61d3      	str	r3, [r2, #28]
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_MspInit+0x5c>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_MspInit+0x60>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_MspInit+0x60>)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40010000 	.word	0x40010000

08000f38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <HAL_I2C_MspInit+0x70>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d123      	bne.n	8000fa0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a13      	ldr	r2, [pc, #76]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f70:	23c0      	movs	r3, #192	; 0xc0
 8000f72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f74:	2312      	movs	r3, #18
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	4619      	mov	r1, r3
 8000f82:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <HAL_I2C_MspInit+0x78>)
 8000f84:	f000 fb6c 	bl	8001660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fa0:	bf00      	nop
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010c00 	.word	0x40010c00

08000fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc4:	d10b      	bne.n	8000fde <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_TIM_Base_MspInit+0x34>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_TIM_Base_MspInit+0x34>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_TIM_Base_MspInit+0x34>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a20      	ldr	r2, [pc, #128]	; (8001088 <HAL_UART_MspInit+0x9c>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d139      	bne.n	8001080 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <HAL_UART_MspInit+0xa0>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	4a1e      	ldr	r2, [pc, #120]	; (800108c <HAL_UART_MspInit+0xa0>)
 8001012:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001016:	6193      	str	r3, [r2, #24]
 8001018:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_UART_MspInit+0xa0>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_UART_MspInit+0xa0>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a18      	ldr	r2, [pc, #96]	; (800108c <HAL_UART_MspInit+0xa0>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_UART_MspInit+0xa0>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800103c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001040:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	4619      	mov	r1, r3
 8001050:	480f      	ldr	r0, [pc, #60]	; (8001090 <HAL_UART_MspInit+0xa4>)
 8001052:	f000 fb05 	bl	8001660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4619      	mov	r1, r3
 800106a:	4809      	ldr	r0, [pc, #36]	; (8001090 <HAL_UART_MspInit+0xa4>)
 800106c:	f000 faf8 	bl	8001660 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	2025      	movs	r0, #37	; 0x25
 8001076:	f000 fa0c 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800107a:	2025      	movs	r0, #37	; 0x25
 800107c:	f000 fa25 	bl	80014ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40013800 	.word	0x40013800
 800108c:	40021000 	.word	0x40021000
 8001090:	40010800 	.word	0x40010800

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010da:	f000 f8c3 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80010e6:	2004      	movs	r0, #4
 80010e8:	f000 fc6e 	bl	80019c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80010f4:	2008      	movs	r0, #8
 80010f6:	f000 fc67 	bl	80019c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <USART1_IRQHandler+0x10>)
 8001106:	f002 f8c5 	bl	8003294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000154 	.word	0x20000154

08001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800111c:	4a14      	ldr	r2, [pc, #80]	; (8001170 <_sbrk+0x5c>)
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <_sbrk+0x60>)
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <_sbrk+0x64>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <_sbrk+0x68>)
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d207      	bcs.n	8001154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001144:	f002 fcd4 	bl	8003af0 <__errno>
 8001148:	4603      	mov	r3, r0
 800114a:	220c      	movs	r2, #12
 800114c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e009      	b.n	8001168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <_sbrk+0x64>)
 8001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20005000 	.word	0x20005000
 8001174:	00000400 	.word	0x00000400
 8001178:	200001c4 	.word	0x200001c4
 800117c:	200001e0 	.word	0x200001e0

08001180 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800118e:	490d      	ldr	r1, [pc, #52]	; (80011c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a4:	4c0a      	ldr	r4, [pc, #40]	; (80011d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011b2:	f7ff ffe5 	bl	8001180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f002 fca1 	bl	8003afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ba:	f7ff fa13 	bl	80005e4 <main>
  bx lr
 80011be:	4770      	bx	lr
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80011c8:	08004754 	.word	0x08004754
  ldr r2, =_sbss
 80011cc:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80011d0:	200001dc 	.word	0x200001dc

080011d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_2_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_Init+0x28>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_Init+0x28>)
 80011e2:	f043 0310 	orr.w	r3, r3, #16
 80011e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 f947 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	200f      	movs	r0, #15
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fe6e 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40022000 	.word	0x40022000

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f95f 	bl	80014e6 <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 f927 	bl	8001492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000024 	.word	0x20000024
 800125c:	2000002c 	.word	0x2000002c
 8001260:	20000028 	.word	0x20000028

08001264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_IncTick+0x1c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x20>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_IncTick+0x20>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	2000002c 	.word	0x2000002c
 8001284:	200001c8 	.word	0x200001c8

08001288 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b02      	ldr	r3, [pc, #8]	; (8001298 <HAL_GetTick+0x10>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	200001c8 	.word	0x200001c8

0800129c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff fff0 	bl	8001288 <HAL_GetTick>
 80012a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b4:	d005      	beq.n	80012c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_Delay+0x44>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012c2:	bf00      	nop
 80012c4:	f7ff ffe0 	bl	8001288 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8f7      	bhi.n	80012c4 <HAL_Delay+0x28>
  {
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000002c 	.word	0x2000002c

080012e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800130c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001316:	4a04      	ldr	r2, [pc, #16]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60d3      	str	r3, [r2, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <__NVIC_GetPriorityGrouping+0x18>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 0307 	and.w	r3, r3, #7
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	db0b      	blt.n	8001372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	f003 021f 	and.w	r2, r3, #31
 8001360:	4906      	ldr	r1, [pc, #24]	; (800137c <__NVIC_EnableIRQ+0x34>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	2001      	movs	r0, #1
 800136a:	fa00 f202 	lsl.w	r2, r0, r2
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	e000e100 	.word	0xe000e100

08001380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	db0a      	blt.n	80013aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	490c      	ldr	r1, [pc, #48]	; (80013cc <__NVIC_SetPriority+0x4c>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	440b      	add	r3, r1
 80013a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a8:	e00a      	b.n	80013c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4908      	ldr	r1, [pc, #32]	; (80013d0 <__NVIC_SetPriority+0x50>)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	3b04      	subs	r3, #4
 80013b8:	0112      	lsls	r2, r2, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	440b      	add	r3, r1
 80013be:	761a      	strb	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	; 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f1c3 0307 	rsb	r3, r3, #7
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	bf28      	it	cs
 80013f2:	2304      	movcs	r3, #4
 80013f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3304      	adds	r3, #4
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d902      	bls.n	8001404 <NVIC_EncodePriority+0x30>
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3b03      	subs	r3, #3
 8001402:	e000      	b.n	8001406 <NVIC_EncodePriority+0x32>
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	f04f 32ff 	mov.w	r2, #4294967295
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	401a      	ands	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800141c:	f04f 31ff 	mov.w	r1, #4294967295
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43d9      	mvns	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	4313      	orrs	r3, r2
         );
}
 800142e:	4618      	mov	r0, r3
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f7ff ff90 	bl	8001380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff2d 	bl	80012e4 <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a4:	f7ff ff42 	bl	800132c <__NVIC_GetPriorityGrouping>
 80014a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff ff90 	bl	80013d4 <NVIC_EncodePriority>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff5f 	bl	8001380 <__NVIC_SetPriority>
}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff35 	bl	8001348 <__NVIC_EnableIRQ>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffa2 	bl	8001438 <SysTick_Config>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014fe:	b480      	push	{r7}
 8001500:	b085      	sub	sp, #20
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001510:	2b02      	cmp	r3, #2
 8001512:	d008      	beq.n	8001526 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2204      	movs	r2, #4
 8001518:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e020      	b.n	8001568 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 020e 	bic.w	r2, r2, #14
 8001534:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0201 	bic.w	r2, r2, #1
 8001544:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154e:	2101      	movs	r1, #1
 8001550:	fa01 f202 	lsl.w	r2, r1, r2
 8001554:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
	...

08001574 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001586:	2b02      	cmp	r3, #2
 8001588:	d005      	beq.n	8001596 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2204      	movs	r2, #4
 800158e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e051      	b.n	800163a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 020e 	bic.w	r2, r2, #14
 80015a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0201 	bic.w	r2, r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a22      	ldr	r2, [pc, #136]	; (8001644 <HAL_DMA_Abort_IT+0xd0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d029      	beq.n	8001614 <HAL_DMA_Abort_IT+0xa0>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a20      	ldr	r2, [pc, #128]	; (8001648 <HAL_DMA_Abort_IT+0xd4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d022      	beq.n	8001610 <HAL_DMA_Abort_IT+0x9c>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a1f      	ldr	r2, [pc, #124]	; (800164c <HAL_DMA_Abort_IT+0xd8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d01a      	beq.n	800160a <HAL_DMA_Abort_IT+0x96>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <HAL_DMA_Abort_IT+0xdc>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d012      	beq.n	8001604 <HAL_DMA_Abort_IT+0x90>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <HAL_DMA_Abort_IT+0xe0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d00a      	beq.n	80015fe <HAL_DMA_Abort_IT+0x8a>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a1a      	ldr	r2, [pc, #104]	; (8001658 <HAL_DMA_Abort_IT+0xe4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d102      	bne.n	80015f8 <HAL_DMA_Abort_IT+0x84>
 80015f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015f6:	e00e      	b.n	8001616 <HAL_DMA_Abort_IT+0xa2>
 80015f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015fc:	e00b      	b.n	8001616 <HAL_DMA_Abort_IT+0xa2>
 80015fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001602:	e008      	b.n	8001616 <HAL_DMA_Abort_IT+0xa2>
 8001604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001608:	e005      	b.n	8001616 <HAL_DMA_Abort_IT+0xa2>
 800160a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800160e:	e002      	b.n	8001616 <HAL_DMA_Abort_IT+0xa2>
 8001610:	2310      	movs	r3, #16
 8001612:	e000      	b.n	8001616 <HAL_DMA_Abort_IT+0xa2>
 8001614:	2301      	movs	r3, #1
 8001616:	4a11      	ldr	r2, [pc, #68]	; (800165c <HAL_DMA_Abort_IT+0xe8>)
 8001618:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	4798      	blx	r3
    } 
  }
  return status;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40020008 	.word	0x40020008
 8001648:	4002001c 	.word	0x4002001c
 800164c:	40020030 	.word	0x40020030
 8001650:	40020044 	.word	0x40020044
 8001654:	40020058 	.word	0x40020058
 8001658:	4002006c 	.word	0x4002006c
 800165c:	40020000 	.word	0x40020000

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b08b      	sub	sp, #44	; 0x2c
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001672:	e169      	b.n	8001948 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001674:	2201      	movs	r2, #1
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	429a      	cmp	r2, r3
 800168e:	f040 8158 	bne.w	8001942 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4a9a      	ldr	r2, [pc, #616]	; (8001900 <HAL_GPIO_Init+0x2a0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d05e      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 800169c:	4a98      	ldr	r2, [pc, #608]	; (8001900 <HAL_GPIO_Init+0x2a0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d875      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016a2:	4a98      	ldr	r2, [pc, #608]	; (8001904 <HAL_GPIO_Init+0x2a4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d058      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016a8:	4a96      	ldr	r2, [pc, #600]	; (8001904 <HAL_GPIO_Init+0x2a4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d86f      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016ae:	4a96      	ldr	r2, [pc, #600]	; (8001908 <HAL_GPIO_Init+0x2a8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d052      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016b4:	4a94      	ldr	r2, [pc, #592]	; (8001908 <HAL_GPIO_Init+0x2a8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d869      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016ba:	4a94      	ldr	r2, [pc, #592]	; (800190c <HAL_GPIO_Init+0x2ac>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d04c      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016c0:	4a92      	ldr	r2, [pc, #584]	; (800190c <HAL_GPIO_Init+0x2ac>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d863      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016c6:	4a92      	ldr	r2, [pc, #584]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d046      	beq.n	800175a <HAL_GPIO_Init+0xfa>
 80016cc:	4a90      	ldr	r2, [pc, #576]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d85d      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016d2:	2b12      	cmp	r3, #18
 80016d4:	d82a      	bhi.n	800172c <HAL_GPIO_Init+0xcc>
 80016d6:	2b12      	cmp	r3, #18
 80016d8:	d859      	bhi.n	800178e <HAL_GPIO_Init+0x12e>
 80016da:	a201      	add	r2, pc, #4	; (adr r2, 80016e0 <HAL_GPIO_Init+0x80>)
 80016dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e0:	0800175b 	.word	0x0800175b
 80016e4:	08001735 	.word	0x08001735
 80016e8:	08001747 	.word	0x08001747
 80016ec:	08001789 	.word	0x08001789
 80016f0:	0800178f 	.word	0x0800178f
 80016f4:	0800178f 	.word	0x0800178f
 80016f8:	0800178f 	.word	0x0800178f
 80016fc:	0800178f 	.word	0x0800178f
 8001700:	0800178f 	.word	0x0800178f
 8001704:	0800178f 	.word	0x0800178f
 8001708:	0800178f 	.word	0x0800178f
 800170c:	0800178f 	.word	0x0800178f
 8001710:	0800178f 	.word	0x0800178f
 8001714:	0800178f 	.word	0x0800178f
 8001718:	0800178f 	.word	0x0800178f
 800171c:	0800178f 	.word	0x0800178f
 8001720:	0800178f 	.word	0x0800178f
 8001724:	0800173d 	.word	0x0800173d
 8001728:	08001751 	.word	0x08001751
 800172c:	4a79      	ldr	r2, [pc, #484]	; (8001914 <HAL_GPIO_Init+0x2b4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d013      	beq.n	800175a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001732:	e02c      	b.n	800178e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	623b      	str	r3, [r7, #32]
          break;
 800173a:	e029      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	3304      	adds	r3, #4
 8001742:	623b      	str	r3, [r7, #32]
          break;
 8001744:	e024      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	3308      	adds	r3, #8
 800174c:	623b      	str	r3, [r7, #32]
          break;
 800174e:	e01f      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	330c      	adds	r3, #12
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e01a      	b.n	8001790 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001762:	2304      	movs	r3, #4
 8001764:	623b      	str	r3, [r7, #32]
          break;
 8001766:	e013      	b.n	8001790 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d105      	bne.n	800177c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001770:	2308      	movs	r3, #8
 8001772:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	611a      	str	r2, [r3, #16]
          break;
 800177a:	e009      	b.n	8001790 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800177c:	2308      	movs	r3, #8
 800177e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	615a      	str	r2, [r3, #20]
          break;
 8001786:	e003      	b.n	8001790 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
          break;
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x130>
          break;
 800178e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2bff      	cmp	r3, #255	; 0xff
 8001794:	d801      	bhi.n	800179a <HAL_GPIO_Init+0x13a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	e001      	b.n	800179e <HAL_GPIO_Init+0x13e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3304      	adds	r3, #4
 800179e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2bff      	cmp	r3, #255	; 0xff
 80017a4:	d802      	bhi.n	80017ac <HAL_GPIO_Init+0x14c>
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	e002      	b.n	80017b2 <HAL_GPIO_Init+0x152>
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	3b08      	subs	r3, #8
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	210f      	movs	r1, #15
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	401a      	ands	r2, r3
 80017c4:	6a39      	ldr	r1, [r7, #32]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	431a      	orrs	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 80b1 	beq.w	8001942 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e0:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <HAL_GPIO_Init+0x2b8>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <HAL_GPIO_Init+0x2b8>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b4a      	ldr	r3, [pc, #296]	; (8001918 <HAL_GPIO_Init+0x2b8>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017f8:	4a48      	ldr	r2, [pc, #288]	; (800191c <HAL_GPIO_Init+0x2bc>)
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a40      	ldr	r2, [pc, #256]	; (8001920 <HAL_GPIO_Init+0x2c0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d013      	beq.n	800184c <HAL_GPIO_Init+0x1ec>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a3f      	ldr	r2, [pc, #252]	; (8001924 <HAL_GPIO_Init+0x2c4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d00d      	beq.n	8001848 <HAL_GPIO_Init+0x1e8>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a3e      	ldr	r2, [pc, #248]	; (8001928 <HAL_GPIO_Init+0x2c8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d007      	beq.n	8001844 <HAL_GPIO_Init+0x1e4>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a3d      	ldr	r2, [pc, #244]	; (800192c <HAL_GPIO_Init+0x2cc>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d101      	bne.n	8001840 <HAL_GPIO_Init+0x1e0>
 800183c:	2303      	movs	r3, #3
 800183e:	e006      	b.n	800184e <HAL_GPIO_Init+0x1ee>
 8001840:	2304      	movs	r3, #4
 8001842:	e004      	b.n	800184e <HAL_GPIO_Init+0x1ee>
 8001844:	2302      	movs	r3, #2
 8001846:	e002      	b.n	800184e <HAL_GPIO_Init+0x1ee>
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <HAL_GPIO_Init+0x1ee>
 800184c:	2300      	movs	r3, #0
 800184e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001850:	f002 0203 	and.w	r2, r2, #3
 8001854:	0092      	lsls	r2, r2, #2
 8001856:	4093      	lsls	r3, r2
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800185e:	492f      	ldr	r1, [pc, #188]	; (800191c <HAL_GPIO_Init+0x2bc>)
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	3302      	adds	r3, #2
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001878:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	492c      	ldr	r1, [pc, #176]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	600b      	str	r3, [r1, #0]
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001886:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	43db      	mvns	r3, r3
 800188e:	4928      	ldr	r1, [pc, #160]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 8001890:	4013      	ands	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	4922      	ldr	r1, [pc, #136]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	491e      	ldr	r1, [pc, #120]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	4918      	ldr	r1, [pc, #96]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	43db      	mvns	r3, r3
 80018de:	4914      	ldr	r1, [pc, #80]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d021      	beq.n	8001934 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	490e      	ldr	r1, [pc, #56]	; (8001930 <HAL_GPIO_Init+0x2d0>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	60cb      	str	r3, [r1, #12]
 80018fc:	e021      	b.n	8001942 <HAL_GPIO_Init+0x2e2>
 80018fe:	bf00      	nop
 8001900:	10320000 	.word	0x10320000
 8001904:	10310000 	.word	0x10310000
 8001908:	10220000 	.word	0x10220000
 800190c:	10210000 	.word	0x10210000
 8001910:	10120000 	.word	0x10120000
 8001914:	10110000 	.word	0x10110000
 8001918:	40021000 	.word	0x40021000
 800191c:	40010000 	.word	0x40010000
 8001920:	40010800 	.word	0x40010800
 8001924:	40010c00 	.word	0x40010c00
 8001928:	40011000 	.word	0x40011000
 800192c:	40011400 	.word	0x40011400
 8001930:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_GPIO_Init+0x304>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	43db      	mvns	r3, r3
 800193c:	4909      	ldr	r1, [pc, #36]	; (8001964 <HAL_GPIO_Init+0x304>)
 800193e:	4013      	ands	r3, r2
 8001940:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	3301      	adds	r3, #1
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	fa22 f303 	lsr.w	r3, r2, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	f47f ae8e 	bne.w	8001674 <HAL_GPIO_Init+0x14>
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	372c      	adds	r7, #44	; 0x2c
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	40010400 	.word	0x40010400

08001968 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	887b      	ldrh	r3, [r7, #2]
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
 8001984:	e001      	b.n	800198a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	460b      	mov	r3, r1
 80019a0:	807b      	strh	r3, [r7, #2]
 80019a2:	4613      	mov	r3, r2
 80019a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a6:	787b      	ldrb	r3, [r7, #1]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ac:	887a      	ldrh	r2, [r7, #2]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019b2:	e003      	b.n	80019bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019b4:	887b      	ldrh	r3, [r7, #2]
 80019b6:	041a      	lsls	r2, r3, #16
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	611a      	str	r2, [r3, #16]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe ffb6 	bl	8000958 <HAL_GPIO_EXTI_Callback>
  }
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40010400 	.word	0x40010400

080019f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e12b      	b.n	8001c62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fa8a 	bl	8000f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2224      	movs	r2, #36	; 0x24
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a5c:	f000 ffea 	bl	8002a34 <HAL_RCC_GetPCLK1Freq>
 8001a60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4a81      	ldr	r2, [pc, #516]	; (8001c6c <HAL_I2C_Init+0x274>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d807      	bhi.n	8001a7c <HAL_I2C_Init+0x84>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4a80      	ldr	r2, [pc, #512]	; (8001c70 <HAL_I2C_Init+0x278>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	bf94      	ite	ls
 8001a74:	2301      	movls	r3, #1
 8001a76:	2300      	movhi	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	e006      	b.n	8001a8a <HAL_I2C_Init+0x92>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4a7d      	ldr	r2, [pc, #500]	; (8001c74 <HAL_I2C_Init+0x27c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	bf94      	ite	ls
 8001a84:	2301      	movls	r3, #1
 8001a86:	2300      	movhi	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0e7      	b.n	8001c62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4a78      	ldr	r2, [pc, #480]	; (8001c78 <HAL_I2C_Init+0x280>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0c9b      	lsrs	r3, r3, #18
 8001a9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a6a      	ldr	r2, [pc, #424]	; (8001c6c <HAL_I2C_Init+0x274>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d802      	bhi.n	8001acc <HAL_I2C_Init+0xd4>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	e009      	b.n	8001ae0 <HAL_I2C_Init+0xe8>
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	4a69      	ldr	r2, [pc, #420]	; (8001c7c <HAL_I2C_Init+0x284>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	099b      	lsrs	r3, r3, #6
 8001ade:	3301      	adds	r3, #1
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001af2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	495c      	ldr	r1, [pc, #368]	; (8001c6c <HAL_I2C_Init+0x274>)
 8001afc:	428b      	cmp	r3, r1
 8001afe:	d819      	bhi.n	8001b34 <HAL_I2C_Init+0x13c>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1e59      	subs	r1, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b0e:	1c59      	adds	r1, r3, #1
 8001b10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b14:	400b      	ands	r3, r1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00a      	beq.n	8001b30 <HAL_I2C_Init+0x138>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1e59      	subs	r1, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b2e:	e051      	b.n	8001bd4 <HAL_I2C_Init+0x1dc>
 8001b30:	2304      	movs	r3, #4
 8001b32:	e04f      	b.n	8001bd4 <HAL_I2C_Init+0x1dc>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d111      	bne.n	8001b60 <HAL_I2C_Init+0x168>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1e58      	subs	r0, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	440b      	add	r3, r1
 8001b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	e012      	b.n	8001b86 <HAL_I2C_Init+0x18e>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1e58      	subs	r0, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	0099      	lsls	r1, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b76:	3301      	adds	r3, #1
 8001b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf0c      	ite	eq
 8001b80:	2301      	moveq	r3, #1
 8001b82:	2300      	movne	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Init+0x196>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e022      	b.n	8001bd4 <HAL_I2C_Init+0x1dc>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10e      	bne.n	8001bb4 <HAL_I2C_Init+0x1bc>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1e58      	subs	r0, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6859      	ldr	r1, [r3, #4]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	440b      	add	r3, r1
 8001ba4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb2:	e00f      	b.n	8001bd4 <HAL_I2C_Init+0x1dc>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1e58      	subs	r0, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	0099      	lsls	r1, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	6809      	ldr	r1, [r1, #0]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69da      	ldr	r2, [r3, #28]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6911      	ldr	r1, [r2, #16]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68d2      	ldr	r2, [r2, #12]
 8001c0e:	4311      	orrs	r1, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	430b      	orrs	r3, r1
 8001c16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	000186a0 	.word	0x000186a0
 8001c70:	001e847f 	.word	0x001e847f
 8001c74:	003d08ff 	.word	0x003d08ff
 8001c78:	431bde83 	.word	0x431bde83
 8001c7c:	10624dd3 	.word	0x10624dd3

08001c80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	817b      	strh	r3, [r7, #10]
 8001c90:	4613      	mov	r3, r2
 8001c92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff faf8 	bl	8001288 <HAL_GetTick>
 8001c98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	f040 80e0 	bne.w	8001e68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2319      	movs	r3, #25
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4970      	ldr	r1, [pc, #448]	; (8001e74 <HAL_I2C_Master_Transmit+0x1f4>)
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f964 	bl	8001f80 <I2C_WaitOnFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e0d3      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_I2C_Master_Transmit+0x50>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e0cc      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d007      	beq.n	8001cf6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 0201 	orr.w	r2, r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2221      	movs	r2, #33	; 0x21
 8001d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2210      	movs	r2, #16
 8001d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	893a      	ldrh	r2, [r7, #8]
 8001d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4a50      	ldr	r2, [pc, #320]	; (8001e78 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d38:	8979      	ldrh	r1, [r7, #10]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	6a3a      	ldr	r2, [r7, #32]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f89c 	bl	8001e7c <I2C_MasterRequestWrite>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e08d      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d64:	e066      	b.n	8001e34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	6a39      	ldr	r1, [r7, #32]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 f9de 	bl	800212c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00d      	beq.n	8001d92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d107      	bne.n	8001d8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e06b      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	781a      	ldrb	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d11b      	bne.n	8001e08 <HAL_I2C_Master_Transmit+0x188>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d017      	beq.n	8001e08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	781a      	ldrb	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	6a39      	ldr	r1, [r7, #32]
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f9ce 	bl	80021ae <I2C_WaitOnBTFFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00d      	beq.n	8001e34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d107      	bne.n	8001e30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e01a      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d194      	bne.n	8001d66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e000      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e68:	2302      	movs	r3, #2
  }
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	00100002 	.word	0x00100002
 8001e78:	ffff0000 	.word	0xffff0000

08001e7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d006      	beq.n	8001ea6 <I2C_MasterRequestWrite+0x2a>
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d003      	beq.n	8001ea6 <I2C_MasterRequestWrite+0x2a>
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ea4:	d108      	bne.n	8001eb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	e00b      	b.n	8001ed0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	2b12      	cmp	r3, #18
 8001ebe:	d107      	bne.n	8001ed0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ece:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f84f 	bl	8001f80 <I2C_WaitOnFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00d      	beq.n	8001f04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef6:	d103      	bne.n	8001f00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e035      	b.n	8001f70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f0c:	d108      	bne.n	8001f20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f0e:	897b      	ldrh	r3, [r7, #10]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f1c:	611a      	str	r2, [r3, #16]
 8001f1e:	e01b      	b.n	8001f58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f20:	897b      	ldrh	r3, [r7, #10]
 8001f22:	11db      	asrs	r3, r3, #7
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	f003 0306 	and.w	r3, r3, #6
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f063 030f 	orn	r3, r3, #15
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	490e      	ldr	r1, [pc, #56]	; (8001f78 <I2C_MasterRequestWrite+0xfc>)
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f875 	bl	800202e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e010      	b.n	8001f70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f4e:	897b      	ldrh	r3, [r7, #10]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4907      	ldr	r1, [pc, #28]	; (8001f7c <I2C_MasterRequestWrite+0x100>)
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f865 	bl	800202e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	00010008 	.word	0x00010008
 8001f7c:	00010002 	.word	0x00010002

08001f80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f90:	e025      	b.n	8001fde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d021      	beq.n	8001fde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f9a:	f7ff f975 	bl	8001288 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d302      	bcc.n	8001fb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d116      	bne.n	8001fde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f043 0220 	orr.w	r2, r3, #32
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e023      	b.n	8002026 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	0c1b      	lsrs	r3, r3, #16
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d10d      	bne.n	8002004 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	bf0c      	ite	eq
 8001ffa:	2301      	moveq	r3, #1
 8001ffc:	2300      	movne	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	e00c      	b.n	800201e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	43da      	mvns	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4013      	ands	r3, r2
 8002010:	b29b      	uxth	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	bf0c      	ite	eq
 8002016:	2301      	moveq	r3, #1
 8002018:	2300      	movne	r3, #0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	429a      	cmp	r2, r3
 8002022:	d0b6      	beq.n	8001f92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800203c:	e051      	b.n	80020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204c:	d123      	bne.n	8002096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002066:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2220      	movs	r2, #32
 8002072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f043 0204 	orr.w	r2, r3, #4
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e046      	b.n	8002124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209c:	d021      	beq.n	80020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800209e:	f7ff f8f3 	bl	8001288 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d302      	bcc.n	80020b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d116      	bne.n	80020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f043 0220 	orr.w	r2, r3, #32
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e020      	b.n	8002124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	0c1b      	lsrs	r3, r3, #16
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d10c      	bne.n	8002106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4013      	ands	r3, r2
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bf14      	ite	ne
 80020fe:	2301      	movne	r3, #1
 8002100:	2300      	moveq	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	e00b      	b.n	800211e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	43da      	mvns	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	4013      	ands	r3, r2
 8002112:	b29b      	uxth	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf14      	ite	ne
 8002118:	2301      	movne	r3, #1
 800211a:	2300      	moveq	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d18d      	bne.n	800203e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002138:	e02d      	b.n	8002196 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f878 	bl	8002230 <I2C_IsAcknowledgeFailed>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e02d      	b.n	80021a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002150:	d021      	beq.n	8002196 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002152:	f7ff f899 	bl	8001288 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	429a      	cmp	r2, r3
 8002160:	d302      	bcc.n	8002168 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d116      	bne.n	8002196 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f043 0220 	orr.w	r2, r3, #32
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e007      	b.n	80021a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a0:	2b80      	cmp	r3, #128	; 0x80
 80021a2:	d1ca      	bne.n	800213a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021ba:	e02d      	b.n	8002218 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 f837 	bl	8002230 <I2C_IsAcknowledgeFailed>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e02d      	b.n	8002228 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d2:	d021      	beq.n	8002218 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d4:	f7ff f858 	bl	8001288 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d302      	bcc.n	80021ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d116      	bne.n	8002218 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f043 0220 	orr.w	r2, r3, #32
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e007      	b.n	8002228 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b04      	cmp	r3, #4
 8002224:	d1ca      	bne.n	80021bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002246:	d11b      	bne.n	8002280 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002250:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f043 0204 	orr.w	r2, r3, #4
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e272      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 8087 	beq.w	80023ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ac:	4b92      	ldr	r3, [pc, #584]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d00c      	beq.n	80022d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022b8:	4b8f      	ldr	r3, [pc, #572]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d112      	bne.n	80022ea <HAL_RCC_OscConfig+0x5e>
 80022c4:	4b8c      	ldr	r3, [pc, #560]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d0:	d10b      	bne.n	80022ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d2:	4b89      	ldr	r3, [pc, #548]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d06c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x12c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d168      	bne.n	80023b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e24c      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x76>
 80022f4:	4b80      	ldr	r3, [pc, #512]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a7f      	ldr	r2, [pc, #508]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	e02e      	b.n	8002360 <HAL_RCC_OscConfig+0xd4>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x98>
 800230a:	4b7b      	ldr	r3, [pc, #492]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a7a      	ldr	r2, [pc, #488]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4b78      	ldr	r3, [pc, #480]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a77      	ldr	r2, [pc, #476]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800231c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e01d      	b.n	8002360 <HAL_RCC_OscConfig+0xd4>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0xbc>
 800232e:	4b72      	ldr	r3, [pc, #456]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a71      	ldr	r2, [pc, #452]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b6f      	ldr	r3, [pc, #444]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6e      	ldr	r2, [pc, #440]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0xd4>
 8002348:	4b6b      	ldr	r3, [pc, #428]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a6a      	ldr	r2, [pc, #424]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800234e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b68      	ldr	r3, [pc, #416]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a67      	ldr	r2, [pc, #412]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800235a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d013      	beq.n	8002390 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7fe ff8e 	bl	8001288 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe ff8a 	bl	8001288 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e200      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	4b5d      	ldr	r3, [pc, #372]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0xe4>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7fe ff7a 	bl	8001288 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002398:	f7fe ff76 	bl	8001288 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e1ec      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x10c>
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d063      	beq.n	800248e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023c6:	4b4c      	ldr	r3, [pc, #304]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023d2:	4b49      	ldr	r3, [pc, #292]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d11c      	bne.n	8002418 <HAL_RCC_OscConfig+0x18c>
 80023de:	4b46      	ldr	r3, [pc, #280]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d116      	bne.n	8002418 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ea:	4b43      	ldr	r3, [pc, #268]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_RCC_OscConfig+0x176>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e1c0      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002402:	4b3d      	ldr	r3, [pc, #244]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4939      	ldr	r1, [pc, #228]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002416:	e03a      	b.n	800248e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002420:	4b36      	ldr	r3, [pc, #216]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7fe ff2f 	bl	8001288 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242e:	f7fe ff2b 	bl	8001288 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e1a1      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002440:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244c:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4927      	ldr	r1, [pc, #156]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]
 8002460:	e015      	b.n	800248e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002462:	4b26      	ldr	r3, [pc, #152]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe ff0e 	bl	8001288 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002470:	f7fe ff0a 	bl	8001288 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e180      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d03a      	beq.n	8002510 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d019      	beq.n	80024d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a2:	4b17      	ldr	r3, [pc, #92]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a8:	f7fe feee 	bl	8001288 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b0:	f7fe feea 	bl	8001288 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e160      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f000 fad8 	bl	8002a84 <RCC_Delay>
 80024d4:	e01c      	b.n	8002510 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024dc:	f7fe fed4 	bl	8001288 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e2:	e00f      	b.n	8002504 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e4:	f7fe fed0 	bl	8001288 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d908      	bls.n	8002504 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e146      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	42420000 	.word	0x42420000
 8002500:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	4b92      	ldr	r3, [pc, #584]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1e9      	bne.n	80024e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80a6 	beq.w	800266a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002522:	4b8b      	ldr	r3, [pc, #556]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10d      	bne.n	800254a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4b88      	ldr	r3, [pc, #544]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4a87      	ldr	r2, [pc, #540]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002538:	61d3      	str	r3, [r2, #28]
 800253a:	4b85      	ldr	r3, [pc, #532]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002546:	2301      	movs	r3, #1
 8002548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254a:	4b82      	ldr	r3, [pc, #520]	; (8002754 <HAL_RCC_OscConfig+0x4c8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d118      	bne.n	8002588 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002556:	4b7f      	ldr	r3, [pc, #508]	; (8002754 <HAL_RCC_OscConfig+0x4c8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a7e      	ldr	r2, [pc, #504]	; (8002754 <HAL_RCC_OscConfig+0x4c8>)
 800255c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002562:	f7fe fe91 	bl	8001288 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256a:	f7fe fe8d 	bl	8001288 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b64      	cmp	r3, #100	; 0x64
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e103      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257c:	4b75      	ldr	r3, [pc, #468]	; (8002754 <HAL_RCC_OscConfig+0x4c8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d106      	bne.n	800259e <HAL_RCC_OscConfig+0x312>
 8002590:	4b6f      	ldr	r3, [pc, #444]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4a6e      	ldr	r2, [pc, #440]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6213      	str	r3, [r2, #32]
 800259c:	e02d      	b.n	80025fa <HAL_RCC_OscConfig+0x36e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x334>
 80025a6:	4b6a      	ldr	r3, [pc, #424]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4a69      	ldr	r2, [pc, #420]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	6213      	str	r3, [r2, #32]
 80025b2:	4b67      	ldr	r3, [pc, #412]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	4a66      	ldr	r2, [pc, #408]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	6213      	str	r3, [r2, #32]
 80025be:	e01c      	b.n	80025fa <HAL_RCC_OscConfig+0x36e>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b05      	cmp	r3, #5
 80025c6:	d10c      	bne.n	80025e2 <HAL_RCC_OscConfig+0x356>
 80025c8:	4b61      	ldr	r3, [pc, #388]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4a60      	ldr	r2, [pc, #384]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	6213      	str	r3, [r2, #32]
 80025d4:	4b5e      	ldr	r3, [pc, #376]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4a5d      	ldr	r2, [pc, #372]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6213      	str	r3, [r2, #32]
 80025e0:	e00b      	b.n	80025fa <HAL_RCC_OscConfig+0x36e>
 80025e2:	4b5b      	ldr	r3, [pc, #364]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4a5a      	ldr	r2, [pc, #360]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	6213      	str	r3, [r2, #32]
 80025ee:	4b58      	ldr	r3, [pc, #352]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4a57      	ldr	r2, [pc, #348]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	f023 0304 	bic.w	r3, r3, #4
 80025f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d015      	beq.n	800262e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002602:	f7fe fe41 	bl	8001288 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe fe3d 	bl	8001288 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0b1      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002620:	4b4b      	ldr	r3, [pc, #300]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ee      	beq.n	800260a <HAL_RCC_OscConfig+0x37e>
 800262c:	e014      	b.n	8002658 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262e:	f7fe fe2b 	bl	8001288 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7fe fe27 	bl	8001288 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f241 3288 	movw	r2, #5000	; 0x1388
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e09b      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264c:	4b40      	ldr	r3, [pc, #256]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ee      	bne.n	8002636 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d105      	bne.n	800266a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265e:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a3b      	ldr	r2, [pc, #236]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002668:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8087 	beq.w	8002782 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002674:	4b36      	ldr	r3, [pc, #216]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 030c 	and.w	r3, r3, #12
 800267c:	2b08      	cmp	r3, #8
 800267e:	d061      	beq.n	8002744 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d146      	bne.n	8002716 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002688:	4b33      	ldr	r3, [pc, #204]	; (8002758 <HAL_RCC_OscConfig+0x4cc>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7fe fdfb 	bl	8001288 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe fdf7 	bl	8001288 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e06d      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a8:	4b29      	ldr	r3, [pc, #164]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026bc:	d108      	bne.n	80026d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026be:	4b24      	ldr	r3, [pc, #144]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	4921      	ldr	r1, [pc, #132]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d0:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a19      	ldr	r1, [r3, #32]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	430b      	orrs	r3, r1
 80026e2:	491b      	ldr	r1, [pc, #108]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_RCC_OscConfig+0x4cc>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7fe fdcb 	bl	8001288 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f6:	f7fe fdc7 	bl	8001288 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e03d      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x46a>
 8002714:	e035      	b.n	8002782 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_RCC_OscConfig+0x4cc>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe fdb4 	bl	8001288 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe fdb0 	bl	8001288 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e026      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x498>
 8002742:	e01e      	b.n	8002782 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d107      	bne.n	800275c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e019      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
 8002750:	40021000 	.word	0x40021000
 8002754:	40007000 	.word	0x40007000
 8002758:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_RCC_OscConfig+0x500>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	429a      	cmp	r2, r3
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000

08002790 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0d0      	b.n	8002946 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027a4:	4b6a      	ldr	r3, [pc, #424]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d910      	bls.n	80027d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b67      	ldr	r3, [pc, #412]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 0207 	bic.w	r2, r3, #7
 80027ba:	4965      	ldr	r1, [pc, #404]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b63      	ldr	r3, [pc, #396]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0b8      	b.n	8002946 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027ec:	4b59      	ldr	r3, [pc, #356]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4a58      	ldr	r2, [pc, #352]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002804:	4b53      	ldr	r3, [pc, #332]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4a52      	ldr	r2, [pc, #328]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800280e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002810:	4b50      	ldr	r3, [pc, #320]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	494d      	ldr	r1, [pc, #308]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d040      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d107      	bne.n	8002846 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002836:	4b47      	ldr	r3, [pc, #284]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d115      	bne.n	800286e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e07f      	b.n	8002946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d107      	bne.n	800285e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284e:	4b41      	ldr	r3, [pc, #260]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d109      	bne.n	800286e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e073      	b.n	8002946 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285e:	4b3d      	ldr	r3, [pc, #244]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e06b      	b.n	8002946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286e:	4b39      	ldr	r3, [pc, #228]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f023 0203 	bic.w	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4936      	ldr	r1, [pc, #216]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002880:	f7fe fd02 	bl	8001288 <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	e00a      	b.n	800289e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002888:	f7fe fcfe 	bl	8001288 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e053      	b.n	8002946 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 020c 	and.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d1eb      	bne.n	8002888 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028b0:	4b27      	ldr	r3, [pc, #156]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d210      	bcs.n	80028e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b24      	ldr	r3, [pc, #144]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 0207 	bic.w	r2, r3, #7
 80028c6:	4922      	ldr	r1, [pc, #136]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ce:	4b20      	ldr	r3, [pc, #128]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e032      	b.n	8002946 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4916      	ldr	r1, [pc, #88]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	490e      	ldr	r1, [pc, #56]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800291e:	f000 f821 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 8002922:	4602      	mov	r2, r0
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	490a      	ldr	r1, [pc, #40]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002930:	5ccb      	ldrb	r3, [r1, r3]
 8002932:	fa22 f303 	lsr.w	r3, r2, r3
 8002936:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_RCC_ClockConfig+0x1cc>)
 8002938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_RCC_ClockConfig+0x1d0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe fc60 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40022000 	.word	0x40022000
 8002954:	40021000 	.word	0x40021000
 8002958:	08004600 	.word	0x08004600
 800295c:	20000024 	.word	0x20000024
 8002960:	20000028 	.word	0x20000028

08002964 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002964:	b490      	push	{r4, r7}
 8002966:	b08a      	sub	sp, #40	; 0x28
 8002968:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800296a:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xac>)
 800296c:	1d3c      	adds	r4, r7, #4
 800296e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002970:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002974:	f240 2301 	movw	r3, #513	; 0x201
 8002978:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800298e:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b04      	cmp	r3, #4
 800299c:	d002      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x40>
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d003      	beq.n	80029aa <HAL_RCC_GetSysClockFreq+0x46>
 80029a2:	e02b      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029a4:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029a6:	623b      	str	r3, [r7, #32]
      break;
 80029a8:	e02b      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	0c9b      	lsrs	r3, r3, #18
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	3328      	adds	r3, #40	; 0x28
 80029b4:	443b      	add	r3, r7
 80029b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029ba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d012      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029c6:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	0c5b      	lsrs	r3, r3, #17
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	3328      	adds	r3, #40	; 0x28
 80029d2:	443b      	add	r3, r7
 80029d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029de:	fb03 f202 	mul.w	r2, r3, r2
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	e004      	b.n	80029f6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f0:	fb02 f303 	mul.w	r3, r2, r3
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	623b      	str	r3, [r7, #32]
      break;
 80029fa:	e002      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029fe:	623b      	str	r3, [r7, #32]
      break;
 8002a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a02:	6a3b      	ldr	r3, [r7, #32]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3728      	adds	r7, #40	; 0x28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc90      	pop	{r4, r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	080045f0 	.word	0x080045f0
 8002a14:	40021000 	.word	0x40021000
 8002a18:	007a1200 	.word	0x007a1200
 8002a1c:	003d0900 	.word	0x003d0900

08002a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a24:	4b02      	ldr	r3, [pc, #8]	; (8002a30 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	20000024 	.word	0x20000024

08002a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a38:	f7ff fff2 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	4903      	ldr	r1, [pc, #12]	; (8002a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a4a:	5ccb      	ldrb	r3, [r1, r3]
 8002a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	08004610 	.word	0x08004610

08002a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a60:	f7ff ffde 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	0adb      	lsrs	r3, r3, #11
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	4903      	ldr	r1, [pc, #12]	; (8002a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a72:	5ccb      	ldrb	r3, [r1, r3]
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	08004610 	.word	0x08004610

08002a84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <RCC_Delay+0x34>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <RCC_Delay+0x38>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	0a5b      	lsrs	r3, r3, #9
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	fb02 f303 	mul.w	r3, r2, r3
 8002a9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002aa0:	bf00      	nop
  }
  while (Delay --);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1e5a      	subs	r2, r3, #1
 8002aa6:	60fa      	str	r2, [r7, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f9      	bne.n	8002aa0 <RCC_Delay+0x1c>
}
 8002aac:	bf00      	nop
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	20000024 	.word	0x20000024
 8002abc:	10624dd3 	.word	0x10624dd3

08002ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e041      	b.n	8002b56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d106      	bne.n	8002aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fe fa64 	bl	8000fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3304      	adds	r3, #4
 8002afc:	4619      	mov	r1, r3
 8002afe:	4610      	mov	r0, r2
 8002b00:	f000 f962 	bl	8002dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d001      	beq.n	8002b78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e032      	b.n	8002bde <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a18      	ldr	r2, [pc, #96]	; (8002be8 <HAL_TIM_Base_Start+0x88>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00e      	beq.n	8002ba8 <HAL_TIM_Base_Start+0x48>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b92:	d009      	beq.n	8002ba8 <HAL_TIM_Base_Start+0x48>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a14      	ldr	r2, [pc, #80]	; (8002bec <HAL_TIM_Base_Start+0x8c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <HAL_TIM_Base_Start+0x48>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <HAL_TIM_Base_Start+0x90>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d111      	bne.n	8002bcc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b06      	cmp	r3, #6
 8002bb8:	d010      	beq.n	8002bdc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bca:	e007      	b.n	8002bdc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	40012c00 	.word	0x40012c00
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40000800 	.word	0x40000800

08002bf4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10f      	bne.n	8002c2c <HAL_TIM_Base_Stop+0x38>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6a1a      	ldr	r2, [r3, #32]
 8002c12:	f240 4344 	movw	r3, #1092	; 0x444
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <HAL_TIM_Base_Stop+0x38>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_TIM_ConfigClockSource+0x18>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e0b3      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x180>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c90:	d03e      	beq.n	8002d10 <HAL_TIM_ConfigClockSource+0xd0>
 8002c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c96:	f200 8087 	bhi.w	8002da8 <HAL_TIM_ConfigClockSource+0x168>
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9e:	f000 8085 	beq.w	8002dac <HAL_TIM_ConfigClockSource+0x16c>
 8002ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca6:	d87f      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x168>
 8002ca8:	2b70      	cmp	r3, #112	; 0x70
 8002caa:	d01a      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0xa2>
 8002cac:	2b70      	cmp	r3, #112	; 0x70
 8002cae:	d87b      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x168>
 8002cb0:	2b60      	cmp	r3, #96	; 0x60
 8002cb2:	d050      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x116>
 8002cb4:	2b60      	cmp	r3, #96	; 0x60
 8002cb6:	d877      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x168>
 8002cb8:	2b50      	cmp	r3, #80	; 0x50
 8002cba:	d03c      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0xf6>
 8002cbc:	2b50      	cmp	r3, #80	; 0x50
 8002cbe:	d873      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x168>
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	d058      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x136>
 8002cc4:	2b40      	cmp	r3, #64	; 0x40
 8002cc6:	d86f      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x168>
 8002cc8:	2b30      	cmp	r3, #48	; 0x30
 8002cca:	d064      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x156>
 8002ccc:	2b30      	cmp	r3, #48	; 0x30
 8002cce:	d86b      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x168>
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d060      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x156>
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d867      	bhi.n	8002da8 <HAL_TIM_ConfigClockSource+0x168>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d05c      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x156>
 8002cdc:	2b10      	cmp	r3, #16
 8002cde:	d05a      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ce0:	e062      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6899      	ldr	r1, [r3, #8]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f000 f942 	bl	8002f7a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	609a      	str	r2, [r3, #8]
      break;
 8002d0e:	e04e      	b.n	8002dae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	6899      	ldr	r1, [r3, #8]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f000 f92b 	bl	8002f7a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d32:	609a      	str	r2, [r3, #8]
      break;
 8002d34:	e03b      	b.n	8002dae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f000 f8a2 	bl	8002e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2150      	movs	r1, #80	; 0x50
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f8f9 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002d54:	e02b      	b.n	8002dae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 f8c0 	bl	8002ee8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2160      	movs	r1, #96	; 0x60
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f8e9 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002d74:	e01b      	b.n	8002dae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f000 f882 	bl	8002e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2140      	movs	r1, #64	; 0x40
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f8d9 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002d94:	e00b      	b.n	8002dae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f000 f8d0 	bl	8002f46 <TIM_ITRx_SetConfig>
        break;
 8002da6:	e002      	b.n	8002dae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002da8:	bf00      	nop
 8002daa:	e000      	b.n	8002dae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002dac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a29      	ldr	r2, [pc, #164]	; (8002e80 <TIM_Base_SetConfig+0xb8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00b      	beq.n	8002df8 <TIM_Base_SetConfig+0x30>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d007      	beq.n	8002df8 <TIM_Base_SetConfig+0x30>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a26      	ldr	r2, [pc, #152]	; (8002e84 <TIM_Base_SetConfig+0xbc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d003      	beq.n	8002df8 <TIM_Base_SetConfig+0x30>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a25      	ldr	r2, [pc, #148]	; (8002e88 <TIM_Base_SetConfig+0xc0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d108      	bne.n	8002e0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <TIM_Base_SetConfig+0xb8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00b      	beq.n	8002e2a <TIM_Base_SetConfig+0x62>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e18:	d007      	beq.n	8002e2a <TIM_Base_SetConfig+0x62>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <TIM_Base_SetConfig+0xbc>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d003      	beq.n	8002e2a <TIM_Base_SetConfig+0x62>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <TIM_Base_SetConfig+0xc0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d108      	bne.n	8002e3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <TIM_Base_SetConfig+0xb8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d103      	bne.n	8002e70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	615a      	str	r2, [r3, #20]
}
 8002e76:	bf00      	nop
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	40012c00 	.word	0x40012c00
 8002e84:	40000400 	.word	0x40000400
 8002e88:	40000800 	.word	0x40000800

08002e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	f023 0201 	bic.w	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f023 030a 	bic.w	r3, r3, #10
 8002ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	621a      	str	r2, [r3, #32]
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	f023 0210 	bic.w	r2, r3, #16
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	031b      	lsls	r3, r3, #12
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	621a      	str	r2, [r3, #32]
}
 8002f3c:	bf00      	nop
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b085      	sub	sp, #20
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f043 0307 	orr.w	r3, r3, #7
 8002f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	609a      	str	r2, [r3, #8]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b087      	sub	sp, #28
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	021a      	lsls	r2, r3, #8
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	609a      	str	r2, [r3, #8]
}
 8002fae:	bf00      	nop
 8002fb0:	371c      	adds	r7, #28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e046      	b.n	800305e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a16      	ldr	r2, [pc, #88]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00e      	beq.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301c:	d009      	beq.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d004      	beq.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a10      	ldr	r2, [pc, #64]	; (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d10c      	bne.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	4313      	orrs	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	40012c00 	.word	0x40012c00
 800306c:	40000400 	.word	0x40000400
 8003070:	40000800 	.word	0x40000800

08003074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e03f      	b.n	8003106 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fd ffa6 	bl	8000fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2224      	movs	r2, #36	; 0x24
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fc87 	bl	80039cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b08a      	sub	sp, #40	; 0x28
 8003112:	af02      	add	r7, sp, #8
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	4613      	mov	r3, r2
 800311c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b20      	cmp	r3, #32
 800312c:	d17c      	bne.n	8003228 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_UART_Transmit+0x2c>
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e075      	b.n	800322a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_UART_Transmit+0x3e>
 8003148:	2302      	movs	r3, #2
 800314a:	e06e      	b.n	800322a <HAL_UART_Transmit+0x11c>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2221      	movs	r2, #33	; 0x21
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003162:	f7fe f891 	bl	8001288 <HAL_GetTick>
 8003166:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	88fa      	ldrh	r2, [r7, #6]
 800316c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	88fa      	ldrh	r2, [r7, #6]
 8003172:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800317c:	d108      	bne.n	8003190 <HAL_UART_Transmit+0x82>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d104      	bne.n	8003190 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	e003      	b.n	8003198 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003194:	2300      	movs	r3, #0
 8003196:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031a0:	e02a      	b.n	80031f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2200      	movs	r2, #0
 80031aa:	2180      	movs	r1, #128	; 0x80
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fa38 	bl	8003622 <UART_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e036      	b.n	800322a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10b      	bne.n	80031da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	3302      	adds	r3, #2
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	e007      	b.n	80031ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	781a      	ldrb	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	3301      	adds	r3, #1
 80031e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1cf      	bne.n	80031a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2200      	movs	r2, #0
 800320a:	2140      	movs	r1, #64	; 0x40
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 fa08 	bl	8003622 <UART_WaitOnFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e006      	b.n	800322a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	e000      	b.n	800322a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003228:	2302      	movs	r3, #2
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	4613      	mov	r3, r2
 800323e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b20      	cmp	r3, #32
 800324a:	d11d      	bne.n	8003288 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_UART_Receive_IT+0x26>
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e016      	b.n	800328a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_UART_Receive_IT+0x38>
 8003266:	2302      	movs	r3, #2
 8003268:	e00f      	b.n	800328a <HAL_UART_Receive_IT+0x58>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	461a      	mov	r2, r3
 800327c:	68b9      	ldr	r1, [r7, #8]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fa19 	bl	80036b6 <UART_Start_Receive_IT>
 8003284:	4603      	mov	r3, r0
 8003286:	e000      	b.n	800328a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003288:	2302      	movs	r3, #2
  }
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08a      	sub	sp, #40	; 0x28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10d      	bne.n	80032e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_UART_IRQHandler+0x52>
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fac9 	bl	8003876 <UART_Receive_IT>
      return;
 80032e4:	e17b      	b.n	80035de <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80b1 	beq.w	8003450 <HAL_UART_IRQHandler+0x1bc>
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <HAL_UART_IRQHandler+0x70>
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 80a6 	beq.w	8003450 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_UART_IRQHandler+0x90>
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f043 0201 	orr.w	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <HAL_UART_IRQHandler+0xb0>
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	f043 0202 	orr.w	r2, r3, #2
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_UART_IRQHandler+0xd0>
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f043 0204 	orr.w	r2, r3, #4
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00f      	beq.n	800338e <HAL_UART_IRQHandler+0xfa>
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b00      	cmp	r3, #0
 8003376:	d104      	bne.n	8003382 <HAL_UART_IRQHandler+0xee>
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f043 0208 	orr.w	r2, r3, #8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 811e 	beq.w	80035d4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <HAL_UART_IRQHandler+0x11e>
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fa62 	bl	8003876 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf14      	ite	ne
 80033c0:	2301      	movne	r3, #1
 80033c2:	2300      	moveq	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <HAL_UART_IRQHandler+0x146>
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d031      	beq.n	800343e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f9a4 	bl	8003728 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d023      	beq.n	8003436 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033fc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	2b00      	cmp	r3, #0
 8003404:	d013      	beq.n	800342e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	4a76      	ldr	r2, [pc, #472]	; (80035e4 <HAL_UART_IRQHandler+0x350>)
 800340c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe f8ae 	bl	8001574 <HAL_DMA_Abort_IT>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d016      	beq.n	800344c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003428:	4610      	mov	r0, r2
 800342a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800342c:	e00e      	b.n	800344c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f8e3 	bl	80035fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003434:	e00a      	b.n	800344c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f8df 	bl	80035fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343c:	e006      	b.n	800344c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8db 	bl	80035fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800344a:	e0c3      	b.n	80035d4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800344c:	bf00      	nop
    return;
 800344e:	e0c1      	b.n	80035d4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	2b01      	cmp	r3, #1
 8003456:	f040 80a1 	bne.w	800359c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 809b 	beq.w	800359c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8095 	beq.w	800359c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d04e      	beq.n	8003534 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80034a0:	8a3b      	ldrh	r3, [r7, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8098 	beq.w	80035d8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034ac:	8a3a      	ldrh	r2, [r7, #16]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	f080 8092 	bcs.w	80035d8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8a3a      	ldrh	r2, [r7, #16]
 80034b8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d02b      	beq.n	800351c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034d2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0210 	bic.w	r2, r2, #16
 8003510:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd fff1 	bl	80014fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003524:	b29b      	uxth	r3, r3
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	b29b      	uxth	r3, r3
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f86d 	bl	800360c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003532:	e051      	b.n	80035d8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800353c:	b29b      	uxth	r3, r3
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d047      	beq.n	80035dc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800354c:	8a7b      	ldrh	r3, [r7, #18]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d044      	beq.n	80035dc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003560:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0210 	bic.w	r2, r2, #16
 800358e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003590:	8a7b      	ldrh	r3, [r7, #18]
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f839 	bl	800360c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800359a:	e01f      	b.n	80035dc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_UART_IRQHandler+0x324>
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f8f9 	bl	80037a8 <UART_Transmit_IT>
    return;
 80035b6:	e012      	b.n	80035de <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00d      	beq.n	80035de <HAL_UART_IRQHandler+0x34a>
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f93a 	bl	8003846 <UART_EndTransmit_IT>
    return;
 80035d2:	e004      	b.n	80035de <HAL_UART_IRQHandler+0x34a>
    return;
 80035d4:	bf00      	nop
 80035d6:	e002      	b.n	80035de <HAL_UART_IRQHandler+0x34a>
      return;
 80035d8:	bf00      	nop
 80035da:	e000      	b.n	80035de <HAL_UART_IRQHandler+0x34a>
      return;
 80035dc:	bf00      	nop
  }
}
 80035de:	3728      	adds	r7, #40	; 0x28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	08003781 	.word	0x08003781

080035e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr

080035fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr

0800360c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	4613      	mov	r3, r2
 8003630:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003632:	e02c      	b.n	800368e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363a:	d028      	beq.n	800368e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d007      	beq.n	8003652 <UART_WaitOnFlagUntilTimeout+0x30>
 8003642:	f7fd fe21 	bl	8001288 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	429a      	cmp	r2, r3
 8003650:	d21d      	bcs.n	800368e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003660:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0201 	bic.w	r2, r2, #1
 8003670:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e00f      	b.n	80036ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4013      	ands	r3, r2
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	bf0c      	ite	eq
 800369e:	2301      	moveq	r3, #1
 80036a0:	2300      	movne	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d0c3      	beq.n	8003634 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b085      	sub	sp, #20
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	4613      	mov	r3, r2
 80036c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	88fa      	ldrh	r2, [r7, #6]
 80036ce:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	88fa      	ldrh	r2, [r7, #6]
 80036d4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2222      	movs	r2, #34	; 0x22
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036fa:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0220 	orr.w	r2, r2, #32
 800371a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800373e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0201 	bic.w	r2, r2, #1
 800374e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	2b01      	cmp	r3, #1
 8003756:	d107      	bne.n	8003768 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0210 	bic.w	r2, r2, #16
 8003766:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f7ff ff2d 	bl	80035fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037a0:	bf00      	nop
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b21      	cmp	r3, #33	; 0x21
 80037ba:	d13e      	bne.n	800383a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c4:	d114      	bne.n	80037f0 <UART_Transmit_IT+0x48>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d110      	bne.n	80037f0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	1c9a      	adds	r2, r3, #2
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	621a      	str	r2, [r3, #32]
 80037ee:	e008      	b.n	8003802 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	1c59      	adds	r1, r3, #1
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6211      	str	r1, [r2, #32]
 80037fa:	781a      	ldrb	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29b      	uxth	r3, r3
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	4619      	mov	r1, r3
 8003810:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10f      	bne.n	8003836 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003824:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003834:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr

08003846 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff febe 	bl	80035e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b22      	cmp	r3, #34	; 0x22
 8003888:	f040 809b 	bne.w	80039c2 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003894:	d117      	bne.n	80038c6 <UART_Receive_IT+0x50>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d113      	bne.n	80038c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	1c9a      	adds	r2, r3, #2
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28
 80038c4:	e026      	b.n	8003914 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d8:	d007      	beq.n	80038ea <UART_Receive_IT+0x74>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <UART_Receive_IT+0x82>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	e008      	b.n	800390a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003904:	b2da      	uxtb	r2, r3
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if((*(huart->pRxBuffPtr-2)=='o')&&(*(huart->pRxBuffPtr-1)=='k'))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	3b02      	subs	r3, #2
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b6f      	cmp	r3, #111	; 0x6f
 800391e:	d14e      	bne.n	80039be <UART_Receive_IT+0x148>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	3b01      	subs	r3, #1
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b6b      	cmp	r3, #107	; 0x6b
 800392a:	d148      	bne.n	80039be <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0220 	bic.w	r2, r2, #32
 800393a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800394a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0201 	bic.w	r2, r2, #1
 800395a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	2b01      	cmp	r3, #1
 800396a:	d123      	bne.n	80039b4 <UART_Receive_IT+0x13e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0210 	bic.w	r2, r2, #16
 8003980:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b10      	cmp	r3, #16
 800398e:	d10a      	bne.n	80039a6 <UART_Receive_IT+0x130>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039aa:	4619      	mov	r1, r3
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fe2d 	bl	800360c <HAL_UARTEx_RxEventCallback>
 80039b2:	e002      	b.n	80039ba <UART_Receive_IT+0x144>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7fd f829 	bl	8000a0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e002      	b.n	80039c4 <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e000      	b.n	80039c4 <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
  }
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a06:	f023 030c 	bic.w	r3, r3, #12
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	430b      	orrs	r3, r1
 8003a12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a2c      	ldr	r2, [pc, #176]	; (8003ae0 <UART_SetConfig+0x114>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d103      	bne.n	8003a3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a34:	f7ff f812 	bl	8002a5c <HAL_RCC_GetPCLK2Freq>
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	e002      	b.n	8003a42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a3c:	f7fe fffa 	bl	8002a34 <HAL_RCC_GetPCLK1Freq>
 8003a40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009a      	lsls	r2, r3, #2
 8003a4c:	441a      	add	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <UART_SetConfig+0x118>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	0119      	lsls	r1, r3, #4
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	009a      	lsls	r2, r3, #2
 8003a6c:	441a      	add	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a78:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <UART_SetConfig+0x118>)
 8003a7a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	2064      	movs	r0, #100	; 0x64
 8003a82:	fb00 f303 	mul.w	r3, r0, r3
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	3332      	adds	r3, #50	; 0x32
 8003a8c:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <UART_SetConfig+0x118>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a98:	4419      	add	r1, r3
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009a      	lsls	r2, r3, #2
 8003aa4:	441a      	add	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <UART_SetConfig+0x118>)
 8003ab2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2064      	movs	r0, #100	; 0x64
 8003aba:	fb00 f303 	mul.w	r3, r0, r3
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	3332      	adds	r3, #50	; 0x32
 8003ac4:	4a07      	ldr	r2, [pc, #28]	; (8003ae4 <UART_SetConfig+0x118>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	f003 020f 	and.w	r2, r3, #15
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	440a      	add	r2, r1
 8003ad6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ad8:	bf00      	nop
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40013800 	.word	0x40013800
 8003ae4:	51eb851f 	.word	0x51eb851f

08003ae8 <atoi>:
 8003ae8:	220a      	movs	r2, #10
 8003aea:	2100      	movs	r1, #0
 8003aec:	f000 b8e2 	b.w	8003cb4 <strtol>

08003af0 <__errno>:
 8003af0:	4b01      	ldr	r3, [pc, #4]	; (8003af8 <__errno+0x8>)
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000030 	.word	0x20000030

08003afc <__libc_init_array>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	2600      	movs	r6, #0
 8003b00:	4d0c      	ldr	r5, [pc, #48]	; (8003b34 <__libc_init_array+0x38>)
 8003b02:	4c0d      	ldr	r4, [pc, #52]	; (8003b38 <__libc_init_array+0x3c>)
 8003b04:	1b64      	subs	r4, r4, r5
 8003b06:	10a4      	asrs	r4, r4, #2
 8003b08:	42a6      	cmp	r6, r4
 8003b0a:	d109      	bne.n	8003b20 <__libc_init_array+0x24>
 8003b0c:	f000 fd36 	bl	800457c <_init>
 8003b10:	2600      	movs	r6, #0
 8003b12:	4d0a      	ldr	r5, [pc, #40]	; (8003b3c <__libc_init_array+0x40>)
 8003b14:	4c0a      	ldr	r4, [pc, #40]	; (8003b40 <__libc_init_array+0x44>)
 8003b16:	1b64      	subs	r4, r4, r5
 8003b18:	10a4      	asrs	r4, r4, #2
 8003b1a:	42a6      	cmp	r6, r4
 8003b1c:	d105      	bne.n	8003b2a <__libc_init_array+0x2e>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b24:	4798      	blx	r3
 8003b26:	3601      	adds	r6, #1
 8003b28:	e7ee      	b.n	8003b08 <__libc_init_array+0xc>
 8003b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2e:	4798      	blx	r3
 8003b30:	3601      	adds	r6, #1
 8003b32:	e7f2      	b.n	8003b1a <__libc_init_array+0x1e>
 8003b34:	0800474c 	.word	0x0800474c
 8003b38:	0800474c 	.word	0x0800474c
 8003b3c:	0800474c 	.word	0x0800474c
 8003b40:	08004750 	.word	0x08004750

08003b44 <memset>:
 8003b44:	4603      	mov	r3, r0
 8003b46:	4402      	add	r2, r0
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d100      	bne.n	8003b4e <memset+0xa>
 8003b4c:	4770      	bx	lr
 8003b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b52:	e7f9      	b.n	8003b48 <memset+0x4>

08003b54 <siprintf>:
 8003b54:	b40e      	push	{r1, r2, r3}
 8003b56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b5a:	b500      	push	{lr}
 8003b5c:	b09c      	sub	sp, #112	; 0x70
 8003b5e:	ab1d      	add	r3, sp, #116	; 0x74
 8003b60:	9002      	str	r0, [sp, #8]
 8003b62:	9006      	str	r0, [sp, #24]
 8003b64:	9107      	str	r1, [sp, #28]
 8003b66:	9104      	str	r1, [sp, #16]
 8003b68:	4808      	ldr	r0, [pc, #32]	; (8003b8c <siprintf+0x38>)
 8003b6a:	4909      	ldr	r1, [pc, #36]	; (8003b90 <siprintf+0x3c>)
 8003b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b70:	9105      	str	r1, [sp, #20]
 8003b72:	6800      	ldr	r0, [r0, #0]
 8003b74:	a902      	add	r1, sp, #8
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	f000 f902 	bl	8003d80 <_svfiprintf_r>
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	9b02      	ldr	r3, [sp, #8]
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	b01c      	add	sp, #112	; 0x70
 8003b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b88:	b003      	add	sp, #12
 8003b8a:	4770      	bx	lr
 8003b8c:	20000030 	.word	0x20000030
 8003b90:	ffff0208 	.word	0xffff0208

08003b94 <strncpy>:
 8003b94:	4603      	mov	r3, r0
 8003b96:	b510      	push	{r4, lr}
 8003b98:	3901      	subs	r1, #1
 8003b9a:	b132      	cbz	r2, 8003baa <strncpy+0x16>
 8003b9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003ba0:	3a01      	subs	r2, #1
 8003ba2:	f803 4b01 	strb.w	r4, [r3], #1
 8003ba6:	2c00      	cmp	r4, #0
 8003ba8:	d1f7      	bne.n	8003b9a <strncpy+0x6>
 8003baa:	2100      	movs	r1, #0
 8003bac:	441a      	add	r2, r3
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d100      	bne.n	8003bb4 <strncpy+0x20>
 8003bb2:	bd10      	pop	{r4, pc}
 8003bb4:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb8:	e7f9      	b.n	8003bae <strncpy+0x1a>
	...

08003bbc <_strtol_l.constprop.0>:
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc2:	4680      	mov	r8, r0
 8003bc4:	d001      	beq.n	8003bca <_strtol_l.constprop.0+0xe>
 8003bc6:	2b24      	cmp	r3, #36	; 0x24
 8003bc8:	d906      	bls.n	8003bd8 <_strtol_l.constprop.0+0x1c>
 8003bca:	f7ff ff91 	bl	8003af0 <__errno>
 8003bce:	2316      	movs	r3, #22
 8003bd0:	6003      	str	r3, [r0, #0]
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd8:	460d      	mov	r5, r1
 8003bda:	4f35      	ldr	r7, [pc, #212]	; (8003cb0 <_strtol_l.constprop.0+0xf4>)
 8003bdc:	4628      	mov	r0, r5
 8003bde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003be2:	5de6      	ldrb	r6, [r4, r7]
 8003be4:	f016 0608 	ands.w	r6, r6, #8
 8003be8:	d1f8      	bne.n	8003bdc <_strtol_l.constprop.0+0x20>
 8003bea:	2c2d      	cmp	r4, #45	; 0x2d
 8003bec:	d12f      	bne.n	8003c4e <_strtol_l.constprop.0+0x92>
 8003bee:	2601      	movs	r6, #1
 8003bf0:	782c      	ldrb	r4, [r5, #0]
 8003bf2:	1c85      	adds	r5, r0, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d057      	beq.n	8003ca8 <_strtol_l.constprop.0+0xec>
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d109      	bne.n	8003c10 <_strtol_l.constprop.0+0x54>
 8003bfc:	2c30      	cmp	r4, #48	; 0x30
 8003bfe:	d107      	bne.n	8003c10 <_strtol_l.constprop.0+0x54>
 8003c00:	7828      	ldrb	r0, [r5, #0]
 8003c02:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003c06:	2858      	cmp	r0, #88	; 0x58
 8003c08:	d149      	bne.n	8003c9e <_strtol_l.constprop.0+0xe2>
 8003c0a:	2310      	movs	r3, #16
 8003c0c:	786c      	ldrb	r4, [r5, #1]
 8003c0e:	3502      	adds	r5, #2
 8003c10:	2700      	movs	r7, #0
 8003c12:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8003c16:	f10e 3eff 	add.w	lr, lr, #4294967295
 8003c1a:	fbbe f9f3 	udiv	r9, lr, r3
 8003c1e:	4638      	mov	r0, r7
 8003c20:	fb03 ea19 	mls	sl, r3, r9, lr
 8003c24:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003c28:	f1bc 0f09 	cmp.w	ip, #9
 8003c2c:	d814      	bhi.n	8003c58 <_strtol_l.constprop.0+0x9c>
 8003c2e:	4664      	mov	r4, ip
 8003c30:	42a3      	cmp	r3, r4
 8003c32:	dd22      	ble.n	8003c7a <_strtol_l.constprop.0+0xbe>
 8003c34:	2f00      	cmp	r7, #0
 8003c36:	db1d      	blt.n	8003c74 <_strtol_l.constprop.0+0xb8>
 8003c38:	4581      	cmp	r9, r0
 8003c3a:	d31b      	bcc.n	8003c74 <_strtol_l.constprop.0+0xb8>
 8003c3c:	d101      	bne.n	8003c42 <_strtol_l.constprop.0+0x86>
 8003c3e:	45a2      	cmp	sl, r4
 8003c40:	db18      	blt.n	8003c74 <_strtol_l.constprop.0+0xb8>
 8003c42:	2701      	movs	r7, #1
 8003c44:	fb00 4003 	mla	r0, r0, r3, r4
 8003c48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c4c:	e7ea      	b.n	8003c24 <_strtol_l.constprop.0+0x68>
 8003c4e:	2c2b      	cmp	r4, #43	; 0x2b
 8003c50:	bf04      	itt	eq
 8003c52:	782c      	ldrbeq	r4, [r5, #0]
 8003c54:	1c85      	addeq	r5, r0, #2
 8003c56:	e7cd      	b.n	8003bf4 <_strtol_l.constprop.0+0x38>
 8003c58:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003c5c:	f1bc 0f19 	cmp.w	ip, #25
 8003c60:	d801      	bhi.n	8003c66 <_strtol_l.constprop.0+0xaa>
 8003c62:	3c37      	subs	r4, #55	; 0x37
 8003c64:	e7e4      	b.n	8003c30 <_strtol_l.constprop.0+0x74>
 8003c66:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003c6a:	f1bc 0f19 	cmp.w	ip, #25
 8003c6e:	d804      	bhi.n	8003c7a <_strtol_l.constprop.0+0xbe>
 8003c70:	3c57      	subs	r4, #87	; 0x57
 8003c72:	e7dd      	b.n	8003c30 <_strtol_l.constprop.0+0x74>
 8003c74:	f04f 37ff 	mov.w	r7, #4294967295
 8003c78:	e7e6      	b.n	8003c48 <_strtol_l.constprop.0+0x8c>
 8003c7a:	2f00      	cmp	r7, #0
 8003c7c:	da07      	bge.n	8003c8e <_strtol_l.constprop.0+0xd2>
 8003c7e:	2322      	movs	r3, #34	; 0x22
 8003c80:	4670      	mov	r0, lr
 8003c82:	f8c8 3000 	str.w	r3, [r8]
 8003c86:	2a00      	cmp	r2, #0
 8003c88:	d0a4      	beq.n	8003bd4 <_strtol_l.constprop.0+0x18>
 8003c8a:	1e69      	subs	r1, r5, #1
 8003c8c:	e005      	b.n	8003c9a <_strtol_l.constprop.0+0xde>
 8003c8e:	b106      	cbz	r6, 8003c92 <_strtol_l.constprop.0+0xd6>
 8003c90:	4240      	negs	r0, r0
 8003c92:	2a00      	cmp	r2, #0
 8003c94:	d09e      	beq.n	8003bd4 <_strtol_l.constprop.0+0x18>
 8003c96:	2f00      	cmp	r7, #0
 8003c98:	d1f7      	bne.n	8003c8a <_strtol_l.constprop.0+0xce>
 8003c9a:	6011      	str	r1, [r2, #0]
 8003c9c:	e79a      	b.n	8003bd4 <_strtol_l.constprop.0+0x18>
 8003c9e:	2430      	movs	r4, #48	; 0x30
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1b5      	bne.n	8003c10 <_strtol_l.constprop.0+0x54>
 8003ca4:	2308      	movs	r3, #8
 8003ca6:	e7b3      	b.n	8003c10 <_strtol_l.constprop.0+0x54>
 8003ca8:	2c30      	cmp	r4, #48	; 0x30
 8003caa:	d0a9      	beq.n	8003c00 <_strtol_l.constprop.0+0x44>
 8003cac:	230a      	movs	r3, #10
 8003cae:	e7af      	b.n	8003c10 <_strtol_l.constprop.0+0x54>
 8003cb0:	08004619 	.word	0x08004619

08003cb4 <strtol>:
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	460a      	mov	r2, r1
 8003cb8:	4601      	mov	r1, r0
 8003cba:	4802      	ldr	r0, [pc, #8]	; (8003cc4 <strtol+0x10>)
 8003cbc:	6800      	ldr	r0, [r0, #0]
 8003cbe:	f7ff bf7d 	b.w	8003bbc <_strtol_l.constprop.0>
 8003cc2:	bf00      	nop
 8003cc4:	20000030 	.word	0x20000030

08003cc8 <__ssputs_r>:
 8003cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ccc:	688e      	ldr	r6, [r1, #8]
 8003cce:	4682      	mov	sl, r0
 8003cd0:	429e      	cmp	r6, r3
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	4690      	mov	r8, r2
 8003cd6:	461f      	mov	r7, r3
 8003cd8:	d838      	bhi.n	8003d4c <__ssputs_r+0x84>
 8003cda:	898a      	ldrh	r2, [r1, #12]
 8003cdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ce0:	d032      	beq.n	8003d48 <__ssputs_r+0x80>
 8003ce2:	6825      	ldr	r5, [r4, #0]
 8003ce4:	6909      	ldr	r1, [r1, #16]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	eba5 0901 	sub.w	r9, r5, r1
 8003cec:	6965      	ldr	r5, [r4, #20]
 8003cee:	444b      	add	r3, r9
 8003cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cf8:	106d      	asrs	r5, r5, #1
 8003cfa:	429d      	cmp	r5, r3
 8003cfc:	bf38      	it	cc
 8003cfe:	461d      	movcc	r5, r3
 8003d00:	0553      	lsls	r3, r2, #21
 8003d02:	d531      	bpl.n	8003d68 <__ssputs_r+0xa0>
 8003d04:	4629      	mov	r1, r5
 8003d06:	f000 fb6f 	bl	80043e8 <_malloc_r>
 8003d0a:	4606      	mov	r6, r0
 8003d0c:	b950      	cbnz	r0, 8003d24 <__ssputs_r+0x5c>
 8003d0e:	230c      	movs	r3, #12
 8003d10:	f04f 30ff 	mov.w	r0, #4294967295
 8003d14:	f8ca 3000 	str.w	r3, [sl]
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d1e:	81a3      	strh	r3, [r4, #12]
 8003d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d24:	464a      	mov	r2, r9
 8003d26:	6921      	ldr	r1, [r4, #16]
 8003d28:	f000 face 	bl	80042c8 <memcpy>
 8003d2c:	89a3      	ldrh	r3, [r4, #12]
 8003d2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d36:	81a3      	strh	r3, [r4, #12]
 8003d38:	6126      	str	r6, [r4, #16]
 8003d3a:	444e      	add	r6, r9
 8003d3c:	6026      	str	r6, [r4, #0]
 8003d3e:	463e      	mov	r6, r7
 8003d40:	6165      	str	r5, [r4, #20]
 8003d42:	eba5 0509 	sub.w	r5, r5, r9
 8003d46:	60a5      	str	r5, [r4, #8]
 8003d48:	42be      	cmp	r6, r7
 8003d4a:	d900      	bls.n	8003d4e <__ssputs_r+0x86>
 8003d4c:	463e      	mov	r6, r7
 8003d4e:	4632      	mov	r2, r6
 8003d50:	4641      	mov	r1, r8
 8003d52:	6820      	ldr	r0, [r4, #0]
 8003d54:	f000 fac6 	bl	80042e4 <memmove>
 8003d58:	68a3      	ldr	r3, [r4, #8]
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	1b9b      	subs	r3, r3, r6
 8003d5e:	60a3      	str	r3, [r4, #8]
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	4433      	add	r3, r6
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	e7db      	b.n	8003d20 <__ssputs_r+0x58>
 8003d68:	462a      	mov	r2, r5
 8003d6a:	f000 fbb1 	bl	80044d0 <_realloc_r>
 8003d6e:	4606      	mov	r6, r0
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d1e1      	bne.n	8003d38 <__ssputs_r+0x70>
 8003d74:	4650      	mov	r0, sl
 8003d76:	6921      	ldr	r1, [r4, #16]
 8003d78:	f000 face 	bl	8004318 <_free_r>
 8003d7c:	e7c7      	b.n	8003d0e <__ssputs_r+0x46>
	...

08003d80 <_svfiprintf_r>:
 8003d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d84:	4698      	mov	r8, r3
 8003d86:	898b      	ldrh	r3, [r1, #12]
 8003d88:	4607      	mov	r7, r0
 8003d8a:	061b      	lsls	r3, r3, #24
 8003d8c:	460d      	mov	r5, r1
 8003d8e:	4614      	mov	r4, r2
 8003d90:	b09d      	sub	sp, #116	; 0x74
 8003d92:	d50e      	bpl.n	8003db2 <_svfiprintf_r+0x32>
 8003d94:	690b      	ldr	r3, [r1, #16]
 8003d96:	b963      	cbnz	r3, 8003db2 <_svfiprintf_r+0x32>
 8003d98:	2140      	movs	r1, #64	; 0x40
 8003d9a:	f000 fb25 	bl	80043e8 <_malloc_r>
 8003d9e:	6028      	str	r0, [r5, #0]
 8003da0:	6128      	str	r0, [r5, #16]
 8003da2:	b920      	cbnz	r0, 8003dae <_svfiprintf_r+0x2e>
 8003da4:	230c      	movs	r3, #12
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	e0d1      	b.n	8003f52 <_svfiprintf_r+0x1d2>
 8003dae:	2340      	movs	r3, #64	; 0x40
 8003db0:	616b      	str	r3, [r5, #20]
 8003db2:	2300      	movs	r3, #0
 8003db4:	9309      	str	r3, [sp, #36]	; 0x24
 8003db6:	2320      	movs	r3, #32
 8003db8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dbc:	2330      	movs	r3, #48	; 0x30
 8003dbe:	f04f 0901 	mov.w	r9, #1
 8003dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dc6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f6c <_svfiprintf_r+0x1ec>
 8003dca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dce:	4623      	mov	r3, r4
 8003dd0:	469a      	mov	sl, r3
 8003dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dd6:	b10a      	cbz	r2, 8003ddc <_svfiprintf_r+0x5c>
 8003dd8:	2a25      	cmp	r2, #37	; 0x25
 8003dda:	d1f9      	bne.n	8003dd0 <_svfiprintf_r+0x50>
 8003ddc:	ebba 0b04 	subs.w	fp, sl, r4
 8003de0:	d00b      	beq.n	8003dfa <_svfiprintf_r+0x7a>
 8003de2:	465b      	mov	r3, fp
 8003de4:	4622      	mov	r2, r4
 8003de6:	4629      	mov	r1, r5
 8003de8:	4638      	mov	r0, r7
 8003dea:	f7ff ff6d 	bl	8003cc8 <__ssputs_r>
 8003dee:	3001      	adds	r0, #1
 8003df0:	f000 80aa 	beq.w	8003f48 <_svfiprintf_r+0x1c8>
 8003df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003df6:	445a      	add	r2, fp
 8003df8:	9209      	str	r2, [sp, #36]	; 0x24
 8003dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80a2 	beq.w	8003f48 <_svfiprintf_r+0x1c8>
 8003e04:	2300      	movs	r3, #0
 8003e06:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e0e:	f10a 0a01 	add.w	sl, sl, #1
 8003e12:	9304      	str	r3, [sp, #16]
 8003e14:	9307      	str	r3, [sp, #28]
 8003e16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e1a:	931a      	str	r3, [sp, #104]	; 0x68
 8003e1c:	4654      	mov	r4, sl
 8003e1e:	2205      	movs	r2, #5
 8003e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e24:	4851      	ldr	r0, [pc, #324]	; (8003f6c <_svfiprintf_r+0x1ec>)
 8003e26:	f000 fa41 	bl	80042ac <memchr>
 8003e2a:	9a04      	ldr	r2, [sp, #16]
 8003e2c:	b9d8      	cbnz	r0, 8003e66 <_svfiprintf_r+0xe6>
 8003e2e:	06d0      	lsls	r0, r2, #27
 8003e30:	bf44      	itt	mi
 8003e32:	2320      	movmi	r3, #32
 8003e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e38:	0711      	lsls	r1, r2, #28
 8003e3a:	bf44      	itt	mi
 8003e3c:	232b      	movmi	r3, #43	; 0x2b
 8003e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e42:	f89a 3000 	ldrb.w	r3, [sl]
 8003e46:	2b2a      	cmp	r3, #42	; 0x2a
 8003e48:	d015      	beq.n	8003e76 <_svfiprintf_r+0xf6>
 8003e4a:	4654      	mov	r4, sl
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	f04f 0c0a 	mov.w	ip, #10
 8003e52:	9a07      	ldr	r2, [sp, #28]
 8003e54:	4621      	mov	r1, r4
 8003e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e5a:	3b30      	subs	r3, #48	; 0x30
 8003e5c:	2b09      	cmp	r3, #9
 8003e5e:	d94e      	bls.n	8003efe <_svfiprintf_r+0x17e>
 8003e60:	b1b0      	cbz	r0, 8003e90 <_svfiprintf_r+0x110>
 8003e62:	9207      	str	r2, [sp, #28]
 8003e64:	e014      	b.n	8003e90 <_svfiprintf_r+0x110>
 8003e66:	eba0 0308 	sub.w	r3, r0, r8
 8003e6a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	46a2      	mov	sl, r4
 8003e72:	9304      	str	r3, [sp, #16]
 8003e74:	e7d2      	b.n	8003e1c <_svfiprintf_r+0x9c>
 8003e76:	9b03      	ldr	r3, [sp, #12]
 8003e78:	1d19      	adds	r1, r3, #4
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	9103      	str	r1, [sp, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bfbb      	ittet	lt
 8003e82:	425b      	neglt	r3, r3
 8003e84:	f042 0202 	orrlt.w	r2, r2, #2
 8003e88:	9307      	strge	r3, [sp, #28]
 8003e8a:	9307      	strlt	r3, [sp, #28]
 8003e8c:	bfb8      	it	lt
 8003e8e:	9204      	strlt	r2, [sp, #16]
 8003e90:	7823      	ldrb	r3, [r4, #0]
 8003e92:	2b2e      	cmp	r3, #46	; 0x2e
 8003e94:	d10c      	bne.n	8003eb0 <_svfiprintf_r+0x130>
 8003e96:	7863      	ldrb	r3, [r4, #1]
 8003e98:	2b2a      	cmp	r3, #42	; 0x2a
 8003e9a:	d135      	bne.n	8003f08 <_svfiprintf_r+0x188>
 8003e9c:	9b03      	ldr	r3, [sp, #12]
 8003e9e:	3402      	adds	r4, #2
 8003ea0:	1d1a      	adds	r2, r3, #4
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	9203      	str	r2, [sp, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bfb8      	it	lt
 8003eaa:	f04f 33ff 	movlt.w	r3, #4294967295
 8003eae:	9305      	str	r3, [sp, #20]
 8003eb0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003f70 <_svfiprintf_r+0x1f0>
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	4650      	mov	r0, sl
 8003eb8:	7821      	ldrb	r1, [r4, #0]
 8003eba:	f000 f9f7 	bl	80042ac <memchr>
 8003ebe:	b140      	cbz	r0, 8003ed2 <_svfiprintf_r+0x152>
 8003ec0:	2340      	movs	r3, #64	; 0x40
 8003ec2:	eba0 000a 	sub.w	r0, r0, sl
 8003ec6:	fa03 f000 	lsl.w	r0, r3, r0
 8003eca:	9b04      	ldr	r3, [sp, #16]
 8003ecc:	3401      	adds	r4, #1
 8003ece:	4303      	orrs	r3, r0
 8003ed0:	9304      	str	r3, [sp, #16]
 8003ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed6:	2206      	movs	r2, #6
 8003ed8:	4826      	ldr	r0, [pc, #152]	; (8003f74 <_svfiprintf_r+0x1f4>)
 8003eda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ede:	f000 f9e5 	bl	80042ac <memchr>
 8003ee2:	2800      	cmp	r0, #0
 8003ee4:	d038      	beq.n	8003f58 <_svfiprintf_r+0x1d8>
 8003ee6:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <_svfiprintf_r+0x1f8>)
 8003ee8:	bb1b      	cbnz	r3, 8003f32 <_svfiprintf_r+0x1b2>
 8003eea:	9b03      	ldr	r3, [sp, #12]
 8003eec:	3307      	adds	r3, #7
 8003eee:	f023 0307 	bic.w	r3, r3, #7
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	9303      	str	r3, [sp, #12]
 8003ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ef8:	4433      	add	r3, r6
 8003efa:	9309      	str	r3, [sp, #36]	; 0x24
 8003efc:	e767      	b.n	8003dce <_svfiprintf_r+0x4e>
 8003efe:	460c      	mov	r4, r1
 8003f00:	2001      	movs	r0, #1
 8003f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f06:	e7a5      	b.n	8003e54 <_svfiprintf_r+0xd4>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f04f 0c0a 	mov.w	ip, #10
 8003f0e:	4619      	mov	r1, r3
 8003f10:	3401      	adds	r4, #1
 8003f12:	9305      	str	r3, [sp, #20]
 8003f14:	4620      	mov	r0, r4
 8003f16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f1a:	3a30      	subs	r2, #48	; 0x30
 8003f1c:	2a09      	cmp	r2, #9
 8003f1e:	d903      	bls.n	8003f28 <_svfiprintf_r+0x1a8>
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0c5      	beq.n	8003eb0 <_svfiprintf_r+0x130>
 8003f24:	9105      	str	r1, [sp, #20]
 8003f26:	e7c3      	b.n	8003eb0 <_svfiprintf_r+0x130>
 8003f28:	4604      	mov	r4, r0
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f30:	e7f0      	b.n	8003f14 <_svfiprintf_r+0x194>
 8003f32:	ab03      	add	r3, sp, #12
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	462a      	mov	r2, r5
 8003f38:	4638      	mov	r0, r7
 8003f3a:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <_svfiprintf_r+0x1fc>)
 8003f3c:	a904      	add	r1, sp, #16
 8003f3e:	f3af 8000 	nop.w
 8003f42:	1c42      	adds	r2, r0, #1
 8003f44:	4606      	mov	r6, r0
 8003f46:	d1d6      	bne.n	8003ef6 <_svfiprintf_r+0x176>
 8003f48:	89ab      	ldrh	r3, [r5, #12]
 8003f4a:	065b      	lsls	r3, r3, #25
 8003f4c:	f53f af2c 	bmi.w	8003da8 <_svfiprintf_r+0x28>
 8003f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f52:	b01d      	add	sp, #116	; 0x74
 8003f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f58:	ab03      	add	r3, sp, #12
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	462a      	mov	r2, r5
 8003f5e:	4638      	mov	r0, r7
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <_svfiprintf_r+0x1fc>)
 8003f62:	a904      	add	r1, sp, #16
 8003f64:	f000 f87c 	bl	8004060 <_printf_i>
 8003f68:	e7eb      	b.n	8003f42 <_svfiprintf_r+0x1c2>
 8003f6a:	bf00      	nop
 8003f6c:	08004719 	.word	0x08004719
 8003f70:	0800471f 	.word	0x0800471f
 8003f74:	08004723 	.word	0x08004723
 8003f78:	00000000 	.word	0x00000000
 8003f7c:	08003cc9 	.word	0x08003cc9

08003f80 <_printf_common>:
 8003f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f84:	4616      	mov	r6, r2
 8003f86:	4699      	mov	r9, r3
 8003f88:	688a      	ldr	r2, [r1, #8]
 8003f8a:	690b      	ldr	r3, [r1, #16]
 8003f8c:	4607      	mov	r7, r0
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	bfb8      	it	lt
 8003f92:	4613      	movlt	r3, r2
 8003f94:	6033      	str	r3, [r6, #0]
 8003f96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fa0:	b10a      	cbz	r2, 8003fa6 <_printf_common+0x26>
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	6033      	str	r3, [r6, #0]
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	0699      	lsls	r1, r3, #26
 8003faa:	bf42      	ittt	mi
 8003fac:	6833      	ldrmi	r3, [r6, #0]
 8003fae:	3302      	addmi	r3, #2
 8003fb0:	6033      	strmi	r3, [r6, #0]
 8003fb2:	6825      	ldr	r5, [r4, #0]
 8003fb4:	f015 0506 	ands.w	r5, r5, #6
 8003fb8:	d106      	bne.n	8003fc8 <_printf_common+0x48>
 8003fba:	f104 0a19 	add.w	sl, r4, #25
 8003fbe:	68e3      	ldr	r3, [r4, #12]
 8003fc0:	6832      	ldr	r2, [r6, #0]
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	42ab      	cmp	r3, r5
 8003fc6:	dc28      	bgt.n	800401a <_printf_common+0x9a>
 8003fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fcc:	1e13      	subs	r3, r2, #0
 8003fce:	6822      	ldr	r2, [r4, #0]
 8003fd0:	bf18      	it	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	0692      	lsls	r2, r2, #26
 8003fd6:	d42d      	bmi.n	8004034 <_printf_common+0xb4>
 8003fd8:	4649      	mov	r1, r9
 8003fda:	4638      	mov	r0, r7
 8003fdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fe0:	47c0      	blx	r8
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	d020      	beq.n	8004028 <_printf_common+0xa8>
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	68e5      	ldr	r5, [r4, #12]
 8003fea:	f003 0306 	and.w	r3, r3, #6
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	bf18      	it	ne
 8003ff2:	2500      	movne	r5, #0
 8003ff4:	6832      	ldr	r2, [r6, #0]
 8003ff6:	f04f 0600 	mov.w	r6, #0
 8003ffa:	68a3      	ldr	r3, [r4, #8]
 8003ffc:	bf08      	it	eq
 8003ffe:	1aad      	subeq	r5, r5, r2
 8004000:	6922      	ldr	r2, [r4, #16]
 8004002:	bf08      	it	eq
 8004004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004008:	4293      	cmp	r3, r2
 800400a:	bfc4      	itt	gt
 800400c:	1a9b      	subgt	r3, r3, r2
 800400e:	18ed      	addgt	r5, r5, r3
 8004010:	341a      	adds	r4, #26
 8004012:	42b5      	cmp	r5, r6
 8004014:	d11a      	bne.n	800404c <_printf_common+0xcc>
 8004016:	2000      	movs	r0, #0
 8004018:	e008      	b.n	800402c <_printf_common+0xac>
 800401a:	2301      	movs	r3, #1
 800401c:	4652      	mov	r2, sl
 800401e:	4649      	mov	r1, r9
 8004020:	4638      	mov	r0, r7
 8004022:	47c0      	blx	r8
 8004024:	3001      	adds	r0, #1
 8004026:	d103      	bne.n	8004030 <_printf_common+0xb0>
 8004028:	f04f 30ff 	mov.w	r0, #4294967295
 800402c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004030:	3501      	adds	r5, #1
 8004032:	e7c4      	b.n	8003fbe <_printf_common+0x3e>
 8004034:	2030      	movs	r0, #48	; 0x30
 8004036:	18e1      	adds	r1, r4, r3
 8004038:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004042:	4422      	add	r2, r4
 8004044:	3302      	adds	r3, #2
 8004046:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800404a:	e7c5      	b.n	8003fd8 <_printf_common+0x58>
 800404c:	2301      	movs	r3, #1
 800404e:	4622      	mov	r2, r4
 8004050:	4649      	mov	r1, r9
 8004052:	4638      	mov	r0, r7
 8004054:	47c0      	blx	r8
 8004056:	3001      	adds	r0, #1
 8004058:	d0e6      	beq.n	8004028 <_printf_common+0xa8>
 800405a:	3601      	adds	r6, #1
 800405c:	e7d9      	b.n	8004012 <_printf_common+0x92>
	...

08004060 <_printf_i>:
 8004060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004064:	7e0f      	ldrb	r7, [r1, #24]
 8004066:	4691      	mov	r9, r2
 8004068:	2f78      	cmp	r7, #120	; 0x78
 800406a:	4680      	mov	r8, r0
 800406c:	460c      	mov	r4, r1
 800406e:	469a      	mov	sl, r3
 8004070:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004072:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004076:	d807      	bhi.n	8004088 <_printf_i+0x28>
 8004078:	2f62      	cmp	r7, #98	; 0x62
 800407a:	d80a      	bhi.n	8004092 <_printf_i+0x32>
 800407c:	2f00      	cmp	r7, #0
 800407e:	f000 80d9 	beq.w	8004234 <_printf_i+0x1d4>
 8004082:	2f58      	cmp	r7, #88	; 0x58
 8004084:	f000 80a4 	beq.w	80041d0 <_printf_i+0x170>
 8004088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800408c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004090:	e03a      	b.n	8004108 <_printf_i+0xa8>
 8004092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004096:	2b15      	cmp	r3, #21
 8004098:	d8f6      	bhi.n	8004088 <_printf_i+0x28>
 800409a:	a101      	add	r1, pc, #4	; (adr r1, 80040a0 <_printf_i+0x40>)
 800409c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040a0:	080040f9 	.word	0x080040f9
 80040a4:	0800410d 	.word	0x0800410d
 80040a8:	08004089 	.word	0x08004089
 80040ac:	08004089 	.word	0x08004089
 80040b0:	08004089 	.word	0x08004089
 80040b4:	08004089 	.word	0x08004089
 80040b8:	0800410d 	.word	0x0800410d
 80040bc:	08004089 	.word	0x08004089
 80040c0:	08004089 	.word	0x08004089
 80040c4:	08004089 	.word	0x08004089
 80040c8:	08004089 	.word	0x08004089
 80040cc:	0800421b 	.word	0x0800421b
 80040d0:	0800413d 	.word	0x0800413d
 80040d4:	080041fd 	.word	0x080041fd
 80040d8:	08004089 	.word	0x08004089
 80040dc:	08004089 	.word	0x08004089
 80040e0:	0800423d 	.word	0x0800423d
 80040e4:	08004089 	.word	0x08004089
 80040e8:	0800413d 	.word	0x0800413d
 80040ec:	08004089 	.word	0x08004089
 80040f0:	08004089 	.word	0x08004089
 80040f4:	08004205 	.word	0x08004205
 80040f8:	682b      	ldr	r3, [r5, #0]
 80040fa:	1d1a      	adds	r2, r3, #4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	602a      	str	r2, [r5, #0]
 8004100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004108:	2301      	movs	r3, #1
 800410a:	e0a4      	b.n	8004256 <_printf_i+0x1f6>
 800410c:	6820      	ldr	r0, [r4, #0]
 800410e:	6829      	ldr	r1, [r5, #0]
 8004110:	0606      	lsls	r6, r0, #24
 8004112:	f101 0304 	add.w	r3, r1, #4
 8004116:	d50a      	bpl.n	800412e <_printf_i+0xce>
 8004118:	680e      	ldr	r6, [r1, #0]
 800411a:	602b      	str	r3, [r5, #0]
 800411c:	2e00      	cmp	r6, #0
 800411e:	da03      	bge.n	8004128 <_printf_i+0xc8>
 8004120:	232d      	movs	r3, #45	; 0x2d
 8004122:	4276      	negs	r6, r6
 8004124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004128:	230a      	movs	r3, #10
 800412a:	485e      	ldr	r0, [pc, #376]	; (80042a4 <_printf_i+0x244>)
 800412c:	e019      	b.n	8004162 <_printf_i+0x102>
 800412e:	680e      	ldr	r6, [r1, #0]
 8004130:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004134:	602b      	str	r3, [r5, #0]
 8004136:	bf18      	it	ne
 8004138:	b236      	sxthne	r6, r6
 800413a:	e7ef      	b.n	800411c <_printf_i+0xbc>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	6820      	ldr	r0, [r4, #0]
 8004140:	1d19      	adds	r1, r3, #4
 8004142:	6029      	str	r1, [r5, #0]
 8004144:	0601      	lsls	r1, r0, #24
 8004146:	d501      	bpl.n	800414c <_printf_i+0xec>
 8004148:	681e      	ldr	r6, [r3, #0]
 800414a:	e002      	b.n	8004152 <_printf_i+0xf2>
 800414c:	0646      	lsls	r6, r0, #25
 800414e:	d5fb      	bpl.n	8004148 <_printf_i+0xe8>
 8004150:	881e      	ldrh	r6, [r3, #0]
 8004152:	2f6f      	cmp	r7, #111	; 0x6f
 8004154:	bf0c      	ite	eq
 8004156:	2308      	moveq	r3, #8
 8004158:	230a      	movne	r3, #10
 800415a:	4852      	ldr	r0, [pc, #328]	; (80042a4 <_printf_i+0x244>)
 800415c:	2100      	movs	r1, #0
 800415e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004162:	6865      	ldr	r5, [r4, #4]
 8004164:	2d00      	cmp	r5, #0
 8004166:	bfa8      	it	ge
 8004168:	6821      	ldrge	r1, [r4, #0]
 800416a:	60a5      	str	r5, [r4, #8]
 800416c:	bfa4      	itt	ge
 800416e:	f021 0104 	bicge.w	r1, r1, #4
 8004172:	6021      	strge	r1, [r4, #0]
 8004174:	b90e      	cbnz	r6, 800417a <_printf_i+0x11a>
 8004176:	2d00      	cmp	r5, #0
 8004178:	d04d      	beq.n	8004216 <_printf_i+0x1b6>
 800417a:	4615      	mov	r5, r2
 800417c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004180:	fb03 6711 	mls	r7, r3, r1, r6
 8004184:	5dc7      	ldrb	r7, [r0, r7]
 8004186:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800418a:	4637      	mov	r7, r6
 800418c:	42bb      	cmp	r3, r7
 800418e:	460e      	mov	r6, r1
 8004190:	d9f4      	bls.n	800417c <_printf_i+0x11c>
 8004192:	2b08      	cmp	r3, #8
 8004194:	d10b      	bne.n	80041ae <_printf_i+0x14e>
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	07de      	lsls	r6, r3, #31
 800419a:	d508      	bpl.n	80041ae <_printf_i+0x14e>
 800419c:	6923      	ldr	r3, [r4, #16]
 800419e:	6861      	ldr	r1, [r4, #4]
 80041a0:	4299      	cmp	r1, r3
 80041a2:	bfde      	ittt	le
 80041a4:	2330      	movle	r3, #48	; 0x30
 80041a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041ae:	1b52      	subs	r2, r2, r5
 80041b0:	6122      	str	r2, [r4, #16]
 80041b2:	464b      	mov	r3, r9
 80041b4:	4621      	mov	r1, r4
 80041b6:	4640      	mov	r0, r8
 80041b8:	f8cd a000 	str.w	sl, [sp]
 80041bc:	aa03      	add	r2, sp, #12
 80041be:	f7ff fedf 	bl	8003f80 <_printf_common>
 80041c2:	3001      	adds	r0, #1
 80041c4:	d14c      	bne.n	8004260 <_printf_i+0x200>
 80041c6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ca:	b004      	add	sp, #16
 80041cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d0:	4834      	ldr	r0, [pc, #208]	; (80042a4 <_printf_i+0x244>)
 80041d2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80041d6:	6829      	ldr	r1, [r5, #0]
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	f851 6b04 	ldr.w	r6, [r1], #4
 80041de:	6029      	str	r1, [r5, #0]
 80041e0:	061d      	lsls	r5, r3, #24
 80041e2:	d514      	bpl.n	800420e <_printf_i+0x1ae>
 80041e4:	07df      	lsls	r7, r3, #31
 80041e6:	bf44      	itt	mi
 80041e8:	f043 0320 	orrmi.w	r3, r3, #32
 80041ec:	6023      	strmi	r3, [r4, #0]
 80041ee:	b91e      	cbnz	r6, 80041f8 <_printf_i+0x198>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	f023 0320 	bic.w	r3, r3, #32
 80041f6:	6023      	str	r3, [r4, #0]
 80041f8:	2310      	movs	r3, #16
 80041fa:	e7af      	b.n	800415c <_printf_i+0xfc>
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	f043 0320 	orr.w	r3, r3, #32
 8004202:	6023      	str	r3, [r4, #0]
 8004204:	2378      	movs	r3, #120	; 0x78
 8004206:	4828      	ldr	r0, [pc, #160]	; (80042a8 <_printf_i+0x248>)
 8004208:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800420c:	e7e3      	b.n	80041d6 <_printf_i+0x176>
 800420e:	0659      	lsls	r1, r3, #25
 8004210:	bf48      	it	mi
 8004212:	b2b6      	uxthmi	r6, r6
 8004214:	e7e6      	b.n	80041e4 <_printf_i+0x184>
 8004216:	4615      	mov	r5, r2
 8004218:	e7bb      	b.n	8004192 <_printf_i+0x132>
 800421a:	682b      	ldr	r3, [r5, #0]
 800421c:	6826      	ldr	r6, [r4, #0]
 800421e:	1d18      	adds	r0, r3, #4
 8004220:	6961      	ldr	r1, [r4, #20]
 8004222:	6028      	str	r0, [r5, #0]
 8004224:	0635      	lsls	r5, r6, #24
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	d501      	bpl.n	800422e <_printf_i+0x1ce>
 800422a:	6019      	str	r1, [r3, #0]
 800422c:	e002      	b.n	8004234 <_printf_i+0x1d4>
 800422e:	0670      	lsls	r0, r6, #25
 8004230:	d5fb      	bpl.n	800422a <_printf_i+0x1ca>
 8004232:	8019      	strh	r1, [r3, #0]
 8004234:	2300      	movs	r3, #0
 8004236:	4615      	mov	r5, r2
 8004238:	6123      	str	r3, [r4, #16]
 800423a:	e7ba      	b.n	80041b2 <_printf_i+0x152>
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	2100      	movs	r1, #0
 8004240:	1d1a      	adds	r2, r3, #4
 8004242:	602a      	str	r2, [r5, #0]
 8004244:	681d      	ldr	r5, [r3, #0]
 8004246:	6862      	ldr	r2, [r4, #4]
 8004248:	4628      	mov	r0, r5
 800424a:	f000 f82f 	bl	80042ac <memchr>
 800424e:	b108      	cbz	r0, 8004254 <_printf_i+0x1f4>
 8004250:	1b40      	subs	r0, r0, r5
 8004252:	6060      	str	r0, [r4, #4]
 8004254:	6863      	ldr	r3, [r4, #4]
 8004256:	6123      	str	r3, [r4, #16]
 8004258:	2300      	movs	r3, #0
 800425a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800425e:	e7a8      	b.n	80041b2 <_printf_i+0x152>
 8004260:	462a      	mov	r2, r5
 8004262:	4649      	mov	r1, r9
 8004264:	4640      	mov	r0, r8
 8004266:	6923      	ldr	r3, [r4, #16]
 8004268:	47d0      	blx	sl
 800426a:	3001      	adds	r0, #1
 800426c:	d0ab      	beq.n	80041c6 <_printf_i+0x166>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	079b      	lsls	r3, r3, #30
 8004272:	d413      	bmi.n	800429c <_printf_i+0x23c>
 8004274:	68e0      	ldr	r0, [r4, #12]
 8004276:	9b03      	ldr	r3, [sp, #12]
 8004278:	4298      	cmp	r0, r3
 800427a:	bfb8      	it	lt
 800427c:	4618      	movlt	r0, r3
 800427e:	e7a4      	b.n	80041ca <_printf_i+0x16a>
 8004280:	2301      	movs	r3, #1
 8004282:	4632      	mov	r2, r6
 8004284:	4649      	mov	r1, r9
 8004286:	4640      	mov	r0, r8
 8004288:	47d0      	blx	sl
 800428a:	3001      	adds	r0, #1
 800428c:	d09b      	beq.n	80041c6 <_printf_i+0x166>
 800428e:	3501      	adds	r5, #1
 8004290:	68e3      	ldr	r3, [r4, #12]
 8004292:	9903      	ldr	r1, [sp, #12]
 8004294:	1a5b      	subs	r3, r3, r1
 8004296:	42ab      	cmp	r3, r5
 8004298:	dcf2      	bgt.n	8004280 <_printf_i+0x220>
 800429a:	e7eb      	b.n	8004274 <_printf_i+0x214>
 800429c:	2500      	movs	r5, #0
 800429e:	f104 0619 	add.w	r6, r4, #25
 80042a2:	e7f5      	b.n	8004290 <_printf_i+0x230>
 80042a4:	0800472a 	.word	0x0800472a
 80042a8:	0800473b 	.word	0x0800473b

080042ac <memchr>:
 80042ac:	4603      	mov	r3, r0
 80042ae:	b510      	push	{r4, lr}
 80042b0:	b2c9      	uxtb	r1, r1
 80042b2:	4402      	add	r2, r0
 80042b4:	4293      	cmp	r3, r2
 80042b6:	4618      	mov	r0, r3
 80042b8:	d101      	bne.n	80042be <memchr+0x12>
 80042ba:	2000      	movs	r0, #0
 80042bc:	e003      	b.n	80042c6 <memchr+0x1a>
 80042be:	7804      	ldrb	r4, [r0, #0]
 80042c0:	3301      	adds	r3, #1
 80042c2:	428c      	cmp	r4, r1
 80042c4:	d1f6      	bne.n	80042b4 <memchr+0x8>
 80042c6:	bd10      	pop	{r4, pc}

080042c8 <memcpy>:
 80042c8:	440a      	add	r2, r1
 80042ca:	4291      	cmp	r1, r2
 80042cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80042d0:	d100      	bne.n	80042d4 <memcpy+0xc>
 80042d2:	4770      	bx	lr
 80042d4:	b510      	push	{r4, lr}
 80042d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042da:	4291      	cmp	r1, r2
 80042dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042e0:	d1f9      	bne.n	80042d6 <memcpy+0xe>
 80042e2:	bd10      	pop	{r4, pc}

080042e4 <memmove>:
 80042e4:	4288      	cmp	r0, r1
 80042e6:	b510      	push	{r4, lr}
 80042e8:	eb01 0402 	add.w	r4, r1, r2
 80042ec:	d902      	bls.n	80042f4 <memmove+0x10>
 80042ee:	4284      	cmp	r4, r0
 80042f0:	4623      	mov	r3, r4
 80042f2:	d807      	bhi.n	8004304 <memmove+0x20>
 80042f4:	1e43      	subs	r3, r0, #1
 80042f6:	42a1      	cmp	r1, r4
 80042f8:	d008      	beq.n	800430c <memmove+0x28>
 80042fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004302:	e7f8      	b.n	80042f6 <memmove+0x12>
 8004304:	4601      	mov	r1, r0
 8004306:	4402      	add	r2, r0
 8004308:	428a      	cmp	r2, r1
 800430a:	d100      	bne.n	800430e <memmove+0x2a>
 800430c:	bd10      	pop	{r4, pc}
 800430e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004316:	e7f7      	b.n	8004308 <memmove+0x24>

08004318 <_free_r>:
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4605      	mov	r5, r0
 800431c:	2900      	cmp	r1, #0
 800431e:	d040      	beq.n	80043a2 <_free_r+0x8a>
 8004320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004324:	1f0c      	subs	r4, r1, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	bfb8      	it	lt
 800432a:	18e4      	addlt	r4, r4, r3
 800432c:	f000 f910 	bl	8004550 <__malloc_lock>
 8004330:	4a1c      	ldr	r2, [pc, #112]	; (80043a4 <_free_r+0x8c>)
 8004332:	6813      	ldr	r3, [r2, #0]
 8004334:	b933      	cbnz	r3, 8004344 <_free_r+0x2c>
 8004336:	6063      	str	r3, [r4, #4]
 8004338:	6014      	str	r4, [r2, #0]
 800433a:	4628      	mov	r0, r5
 800433c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004340:	f000 b90c 	b.w	800455c <__malloc_unlock>
 8004344:	42a3      	cmp	r3, r4
 8004346:	d908      	bls.n	800435a <_free_r+0x42>
 8004348:	6820      	ldr	r0, [r4, #0]
 800434a:	1821      	adds	r1, r4, r0
 800434c:	428b      	cmp	r3, r1
 800434e:	bf01      	itttt	eq
 8004350:	6819      	ldreq	r1, [r3, #0]
 8004352:	685b      	ldreq	r3, [r3, #4]
 8004354:	1809      	addeq	r1, r1, r0
 8004356:	6021      	streq	r1, [r4, #0]
 8004358:	e7ed      	b.n	8004336 <_free_r+0x1e>
 800435a:	461a      	mov	r2, r3
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	b10b      	cbz	r3, 8004364 <_free_r+0x4c>
 8004360:	42a3      	cmp	r3, r4
 8004362:	d9fa      	bls.n	800435a <_free_r+0x42>
 8004364:	6811      	ldr	r1, [r2, #0]
 8004366:	1850      	adds	r0, r2, r1
 8004368:	42a0      	cmp	r0, r4
 800436a:	d10b      	bne.n	8004384 <_free_r+0x6c>
 800436c:	6820      	ldr	r0, [r4, #0]
 800436e:	4401      	add	r1, r0
 8004370:	1850      	adds	r0, r2, r1
 8004372:	4283      	cmp	r3, r0
 8004374:	6011      	str	r1, [r2, #0]
 8004376:	d1e0      	bne.n	800433a <_free_r+0x22>
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	4401      	add	r1, r0
 800437e:	6011      	str	r1, [r2, #0]
 8004380:	6053      	str	r3, [r2, #4]
 8004382:	e7da      	b.n	800433a <_free_r+0x22>
 8004384:	d902      	bls.n	800438c <_free_r+0x74>
 8004386:	230c      	movs	r3, #12
 8004388:	602b      	str	r3, [r5, #0]
 800438a:	e7d6      	b.n	800433a <_free_r+0x22>
 800438c:	6820      	ldr	r0, [r4, #0]
 800438e:	1821      	adds	r1, r4, r0
 8004390:	428b      	cmp	r3, r1
 8004392:	bf01      	itttt	eq
 8004394:	6819      	ldreq	r1, [r3, #0]
 8004396:	685b      	ldreq	r3, [r3, #4]
 8004398:	1809      	addeq	r1, r1, r0
 800439a:	6021      	streq	r1, [r4, #0]
 800439c:	6063      	str	r3, [r4, #4]
 800439e:	6054      	str	r4, [r2, #4]
 80043a0:	e7cb      	b.n	800433a <_free_r+0x22>
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
 80043a4:	200001cc 	.word	0x200001cc

080043a8 <sbrk_aligned>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	4e0e      	ldr	r6, [pc, #56]	; (80043e4 <sbrk_aligned+0x3c>)
 80043ac:	460c      	mov	r4, r1
 80043ae:	6831      	ldr	r1, [r6, #0]
 80043b0:	4605      	mov	r5, r0
 80043b2:	b911      	cbnz	r1, 80043ba <sbrk_aligned+0x12>
 80043b4:	f000 f8bc 	bl	8004530 <_sbrk_r>
 80043b8:	6030      	str	r0, [r6, #0]
 80043ba:	4621      	mov	r1, r4
 80043bc:	4628      	mov	r0, r5
 80043be:	f000 f8b7 	bl	8004530 <_sbrk_r>
 80043c2:	1c43      	adds	r3, r0, #1
 80043c4:	d00a      	beq.n	80043dc <sbrk_aligned+0x34>
 80043c6:	1cc4      	adds	r4, r0, #3
 80043c8:	f024 0403 	bic.w	r4, r4, #3
 80043cc:	42a0      	cmp	r0, r4
 80043ce:	d007      	beq.n	80043e0 <sbrk_aligned+0x38>
 80043d0:	1a21      	subs	r1, r4, r0
 80043d2:	4628      	mov	r0, r5
 80043d4:	f000 f8ac 	bl	8004530 <_sbrk_r>
 80043d8:	3001      	adds	r0, #1
 80043da:	d101      	bne.n	80043e0 <sbrk_aligned+0x38>
 80043dc:	f04f 34ff 	mov.w	r4, #4294967295
 80043e0:	4620      	mov	r0, r4
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
 80043e4:	200001d0 	.word	0x200001d0

080043e8 <_malloc_r>:
 80043e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ec:	1ccd      	adds	r5, r1, #3
 80043ee:	f025 0503 	bic.w	r5, r5, #3
 80043f2:	3508      	adds	r5, #8
 80043f4:	2d0c      	cmp	r5, #12
 80043f6:	bf38      	it	cc
 80043f8:	250c      	movcc	r5, #12
 80043fa:	2d00      	cmp	r5, #0
 80043fc:	4607      	mov	r7, r0
 80043fe:	db01      	blt.n	8004404 <_malloc_r+0x1c>
 8004400:	42a9      	cmp	r1, r5
 8004402:	d905      	bls.n	8004410 <_malloc_r+0x28>
 8004404:	230c      	movs	r3, #12
 8004406:	2600      	movs	r6, #0
 8004408:	603b      	str	r3, [r7, #0]
 800440a:	4630      	mov	r0, r6
 800440c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004410:	4e2e      	ldr	r6, [pc, #184]	; (80044cc <_malloc_r+0xe4>)
 8004412:	f000 f89d 	bl	8004550 <__malloc_lock>
 8004416:	6833      	ldr	r3, [r6, #0]
 8004418:	461c      	mov	r4, r3
 800441a:	bb34      	cbnz	r4, 800446a <_malloc_r+0x82>
 800441c:	4629      	mov	r1, r5
 800441e:	4638      	mov	r0, r7
 8004420:	f7ff ffc2 	bl	80043a8 <sbrk_aligned>
 8004424:	1c43      	adds	r3, r0, #1
 8004426:	4604      	mov	r4, r0
 8004428:	d14d      	bne.n	80044c6 <_malloc_r+0xde>
 800442a:	6834      	ldr	r4, [r6, #0]
 800442c:	4626      	mov	r6, r4
 800442e:	2e00      	cmp	r6, #0
 8004430:	d140      	bne.n	80044b4 <_malloc_r+0xcc>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	4631      	mov	r1, r6
 8004436:	4638      	mov	r0, r7
 8004438:	eb04 0803 	add.w	r8, r4, r3
 800443c:	f000 f878 	bl	8004530 <_sbrk_r>
 8004440:	4580      	cmp	r8, r0
 8004442:	d13a      	bne.n	80044ba <_malloc_r+0xd2>
 8004444:	6821      	ldr	r1, [r4, #0]
 8004446:	3503      	adds	r5, #3
 8004448:	1a6d      	subs	r5, r5, r1
 800444a:	f025 0503 	bic.w	r5, r5, #3
 800444e:	3508      	adds	r5, #8
 8004450:	2d0c      	cmp	r5, #12
 8004452:	bf38      	it	cc
 8004454:	250c      	movcc	r5, #12
 8004456:	4638      	mov	r0, r7
 8004458:	4629      	mov	r1, r5
 800445a:	f7ff ffa5 	bl	80043a8 <sbrk_aligned>
 800445e:	3001      	adds	r0, #1
 8004460:	d02b      	beq.n	80044ba <_malloc_r+0xd2>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	442b      	add	r3, r5
 8004466:	6023      	str	r3, [r4, #0]
 8004468:	e00e      	b.n	8004488 <_malloc_r+0xa0>
 800446a:	6822      	ldr	r2, [r4, #0]
 800446c:	1b52      	subs	r2, r2, r5
 800446e:	d41e      	bmi.n	80044ae <_malloc_r+0xc6>
 8004470:	2a0b      	cmp	r2, #11
 8004472:	d916      	bls.n	80044a2 <_malloc_r+0xba>
 8004474:	1961      	adds	r1, r4, r5
 8004476:	42a3      	cmp	r3, r4
 8004478:	6025      	str	r5, [r4, #0]
 800447a:	bf18      	it	ne
 800447c:	6059      	strne	r1, [r3, #4]
 800447e:	6863      	ldr	r3, [r4, #4]
 8004480:	bf08      	it	eq
 8004482:	6031      	streq	r1, [r6, #0]
 8004484:	5162      	str	r2, [r4, r5]
 8004486:	604b      	str	r3, [r1, #4]
 8004488:	4638      	mov	r0, r7
 800448a:	f104 060b 	add.w	r6, r4, #11
 800448e:	f000 f865 	bl	800455c <__malloc_unlock>
 8004492:	f026 0607 	bic.w	r6, r6, #7
 8004496:	1d23      	adds	r3, r4, #4
 8004498:	1af2      	subs	r2, r6, r3
 800449a:	d0b6      	beq.n	800440a <_malloc_r+0x22>
 800449c:	1b9b      	subs	r3, r3, r6
 800449e:	50a3      	str	r3, [r4, r2]
 80044a0:	e7b3      	b.n	800440a <_malloc_r+0x22>
 80044a2:	6862      	ldr	r2, [r4, #4]
 80044a4:	42a3      	cmp	r3, r4
 80044a6:	bf0c      	ite	eq
 80044a8:	6032      	streq	r2, [r6, #0]
 80044aa:	605a      	strne	r2, [r3, #4]
 80044ac:	e7ec      	b.n	8004488 <_malloc_r+0xa0>
 80044ae:	4623      	mov	r3, r4
 80044b0:	6864      	ldr	r4, [r4, #4]
 80044b2:	e7b2      	b.n	800441a <_malloc_r+0x32>
 80044b4:	4634      	mov	r4, r6
 80044b6:	6876      	ldr	r6, [r6, #4]
 80044b8:	e7b9      	b.n	800442e <_malloc_r+0x46>
 80044ba:	230c      	movs	r3, #12
 80044bc:	4638      	mov	r0, r7
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	f000 f84c 	bl	800455c <__malloc_unlock>
 80044c4:	e7a1      	b.n	800440a <_malloc_r+0x22>
 80044c6:	6025      	str	r5, [r4, #0]
 80044c8:	e7de      	b.n	8004488 <_malloc_r+0xa0>
 80044ca:	bf00      	nop
 80044cc:	200001cc 	.word	0x200001cc

080044d0 <_realloc_r>:
 80044d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d4:	4680      	mov	r8, r0
 80044d6:	4614      	mov	r4, r2
 80044d8:	460e      	mov	r6, r1
 80044da:	b921      	cbnz	r1, 80044e6 <_realloc_r+0x16>
 80044dc:	4611      	mov	r1, r2
 80044de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044e2:	f7ff bf81 	b.w	80043e8 <_malloc_r>
 80044e6:	b92a      	cbnz	r2, 80044f4 <_realloc_r+0x24>
 80044e8:	f7ff ff16 	bl	8004318 <_free_r>
 80044ec:	4625      	mov	r5, r4
 80044ee:	4628      	mov	r0, r5
 80044f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044f4:	f000 f838 	bl	8004568 <_malloc_usable_size_r>
 80044f8:	4284      	cmp	r4, r0
 80044fa:	4607      	mov	r7, r0
 80044fc:	d802      	bhi.n	8004504 <_realloc_r+0x34>
 80044fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004502:	d812      	bhi.n	800452a <_realloc_r+0x5a>
 8004504:	4621      	mov	r1, r4
 8004506:	4640      	mov	r0, r8
 8004508:	f7ff ff6e 	bl	80043e8 <_malloc_r>
 800450c:	4605      	mov	r5, r0
 800450e:	2800      	cmp	r0, #0
 8004510:	d0ed      	beq.n	80044ee <_realloc_r+0x1e>
 8004512:	42bc      	cmp	r4, r7
 8004514:	4622      	mov	r2, r4
 8004516:	4631      	mov	r1, r6
 8004518:	bf28      	it	cs
 800451a:	463a      	movcs	r2, r7
 800451c:	f7ff fed4 	bl	80042c8 <memcpy>
 8004520:	4631      	mov	r1, r6
 8004522:	4640      	mov	r0, r8
 8004524:	f7ff fef8 	bl	8004318 <_free_r>
 8004528:	e7e1      	b.n	80044ee <_realloc_r+0x1e>
 800452a:	4635      	mov	r5, r6
 800452c:	e7df      	b.n	80044ee <_realloc_r+0x1e>
	...

08004530 <_sbrk_r>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	2300      	movs	r3, #0
 8004534:	4d05      	ldr	r5, [pc, #20]	; (800454c <_sbrk_r+0x1c>)
 8004536:	4604      	mov	r4, r0
 8004538:	4608      	mov	r0, r1
 800453a:	602b      	str	r3, [r5, #0]
 800453c:	f7fc fdea 	bl	8001114 <_sbrk>
 8004540:	1c43      	adds	r3, r0, #1
 8004542:	d102      	bne.n	800454a <_sbrk_r+0x1a>
 8004544:	682b      	ldr	r3, [r5, #0]
 8004546:	b103      	cbz	r3, 800454a <_sbrk_r+0x1a>
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	bd38      	pop	{r3, r4, r5, pc}
 800454c:	200001d4 	.word	0x200001d4

08004550 <__malloc_lock>:
 8004550:	4801      	ldr	r0, [pc, #4]	; (8004558 <__malloc_lock+0x8>)
 8004552:	f000 b811 	b.w	8004578 <__retarget_lock_acquire_recursive>
 8004556:	bf00      	nop
 8004558:	200001d8 	.word	0x200001d8

0800455c <__malloc_unlock>:
 800455c:	4801      	ldr	r0, [pc, #4]	; (8004564 <__malloc_unlock+0x8>)
 800455e:	f000 b80c 	b.w	800457a <__retarget_lock_release_recursive>
 8004562:	bf00      	nop
 8004564:	200001d8 	.word	0x200001d8

08004568 <_malloc_usable_size_r>:
 8004568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800456c:	1f18      	subs	r0, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	bfbc      	itt	lt
 8004572:	580b      	ldrlt	r3, [r1, r0]
 8004574:	18c0      	addlt	r0, r0, r3
 8004576:	4770      	bx	lr

08004578 <__retarget_lock_acquire_recursive>:
 8004578:	4770      	bx	lr

0800457a <__retarget_lock_release_recursive>:
 800457a:	4770      	bx	lr

0800457c <_init>:
 800457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457e:	bf00      	nop
 8004580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004582:	bc08      	pop	{r3}
 8004584:	469e      	mov	lr, r3
 8004586:	4770      	bx	lr

08004588 <_fini>:
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	bf00      	nop
 800458c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458e:	bc08      	pop	{r3}
 8004590:	469e      	mov	lr, r3
 8004592:	4770      	bx	lr
